<?php $OOO000000 = urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64');$GLOBALS['OOO0000O0'] = $OOO000000[4] . $OOO000000[9] . $OOO000000[3] . $OOO000000[5] . $OOO000000[2] . $OOO000000[10] . $OOO000000[13] . $OOO000000[16];$GLOBALS['OOO0000O0'] .= $GLOBALS['OOO0000O0'][3] . $OOO000000[11] . $OOO000000[12] . $GLOBALS['OOO0000O0'][7] . $OOO000000[5];$GLOBALS['O0O00OO00'] = $OOO000000[0] . $OOO000000[8] . $OOO000000[5] . $OOO000000[9] . $OOO000000[16];$GLOBALS['OOO000O00'] = $OOO000000[0] . $OOO000000[12] . $OOO000000[7] . $OOO000000[5] . $OOO000000[15];$GLOBALS['OOO00000O'] = $OOO000000[3] . $OOO000000[14] . $OOO000000[8] . $OOO000000[14] . $OOO000000[8];$OOO0O0O00 = __FILE__; $OO00O0000 = 405; eval($GLOBALS['OOO0000O0']('JE8wMDBPME8wMCA9ICRHTE9CQUxTWydPT08wMDBPMDAnXSgkT09PME8wTzAwLCAncmInKTsgJE9PMDBPMDBPMCA9IGZyZWFkcygkTzAwME8wTzAwLCAkT08wME8wMDAwLCAkT09PME8wTzAwKTsgZXZhbCgkT08wME8wME8wKTs=')); return; ?>
/**
=================================================
POgN
=================================================
 */
omEpp tLEW_tfQkq_PpIT_tFUkRq {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::FmkIqU('tLEW_tfQkq_PpIT_tFUkRq::mRJkq'); //đăqJ qjậh
        tLEW::EfQkq('tLEW_tfQkq_PpIT_tFUkRq::TIpIUaEppvRTf'); //TRRU TIpIU QậU ljẩu
        tLEW::EfQkq('tLEW_tfQkq_PpIT_tFUkRq::FjEqJIaEppvRTf'); //upIT đổk QậU ljẩu
        tLEW::EfQkq('tLEW_tfQkq_PpIT_tFUkRq::pEVIaTRikmI'); //upIT UjEw đổk UjôqJ Ukq
        tLEW::EfQkq('tLEW_tfQkq_PpIT_tFUkRq::QRVIHTEpj'); //WóE upIT
        tLEW::mRJkq('tLEW_tfQkq_PpIT_tFUkRq::mRJkqtp'); //đăqJ qjậh upIT #
        tLEW::mRJkq('tLEW_tfQkq_PpIT_tFUkRq::mRJkqtprEFlNRRU'); //Guw mạk upIT UTướF ljk mRJkq Ep
    }
    pUEUkF iuqFUkRq mRJkq($Fk, $QRfIm) {
        $TIpumU['QIppEJI'] = 'ĐăqJ qjậh ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] = 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $upITqEQI = NIsuIpU::hRpU('upITqEQI');

            $hEppvRTf = NIsuIpU::hRpU('hEppvRTf');

            $upIT = tuUj::mRJkq(['upITqEQI' => $upITqEQI, 'hEppvRTf' => $hEppvRTf]);

            ki(kp_plf_ITTRT($upIT) ) {
                iRTIEFj ($upIT->ITTRTp Ep $ITTRT_lIw => $ITTRT_VEmuI) {
                    $TIpumU['QIppEJI'] = $ITTRT_VEmuI[x];
                }
            }
            ImpI {
                ki(!PpIT::jEpoEh($upIT->kf, 'mRJJkq_EfQkq')) {
                    $TIpumU['pUEUup'] 	= 'ITTRT';
                    $TIpumU['QIppEJI'] 	= 'rạq ljôqJ Fó suwềq UTuw Fậh!';
                    uqpIU($_OgOOKMA['upIT']);
                    pIUFRRlkI("upIT_mRJkq",  '', UkQI()-Yx, PTm::eEpI());
                }
                ImpI {
                    fR_EFUkRq('plf_EfQkq_mRJkq', $upIT );
                    $_OgOOKMA['EmmRv_uhmREf']	= UTuI;
                    $TIpumU['pUEUup'] 			= 'puFFIpp';
                    $TIpumU['QIppEJI'] 			= 'ĐăqJ qjậh Ujàqj FôqJ!';
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq TIpIUaEppvRTf($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] = 'HjEw đổk QậU ljẩu UjấU eạk!';

        $TIpumU['pUEUup']     = 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            ki(!tfQkq::kpNRRU()) {
                $TIpumU['QIppEJI'] = 'rạq FjưE Fó suwềq UjEw đổk QậU ljẩu Ujàqj Vkêq!';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $QRfIm->pIUUEemI('upITp');

            $hRpU 			= NIsuIpU::hRpU();

            $upIT_FuTTIqU 	= tuUj::upIT();

            //lkểQ UTE suwềq UjEw đổk
            ki($hRpU['FjIFl'] == 'iEmpI') {

                $hRpU['hEppvRTf'] = tuUj::JIqITEUIaEppvRTf($hRpU['hEppvRTf'], $upIT_FuTTIqU->pEmU);

                ki($hRpU['hEppvRTf'] == $upIT_FuTTIqU->hEppvRTf) {
                    $TIpumU['pUEUup'] = 'puFFIpp';
                }
                ImpI {
                    $TIpumU['QIppEJI'] = 'rạq FjưE Fó suwềq UjEw đổk QậU ljẩu Ujàqj Vkêq qàw!';
                }
            }
            //Ukếq jàqj TIpIU hEpp
            ki($hRpU['FjIFl'] == 'UTuI') {

                ki(!puhITEfQkq($upIT_FuTTIqU->kf)) {
                    $TIpumU['QIppEJI'] = 'rạq FjưE Fó suwềq UjEw đổk QậU ljẩu Ujàqj Vkêq qàw!';
                    IFjR LpRq_IqFRfI($TIpumU);
                    TIUuTq iEmpI;
                }

                $upIT = PpIT::JIU($hRpU['kf']);

                $fEUE['hEppvRTf'] 	=  tuUj::JIqITEUIaEppvRTf($hRpU['hEppvRTf'], $upIT->pEmU);
                $fEUE['kf'] 	=  $upIT->kf;

                ki(!kp_plf_ITTRT(PpIT::kqpITU($fEUE))) {
                    $TIpumU['pUEUup'] 	= 'puFFIpp';
                    $TIpumU['QIppEJI'] 	= 'NIpIU QậU ljẩu Ujàqj FôqJ.';
                }
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq iEmpI;
    }
    pUEUkF iuqFUkRq FjEqJIaEppvRTf($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU fữ mkệu ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $kf = (kqU)NIsuIpU::hRpU('kf');

            $upIT_FuTTIqU 	= tuUj::upIT();

            $upIT_ReL 		= PpIT::JIU($kf);

            ki($upIT_FuTTIqU->kf != $upIT_ReL->kf && !tuUj::jEpoEh('IfkU_upITp')) {
                $TIpumU['QIppEJI'] = __('rạq ljôqJ Fó suwềq Fậh qjậU UjôqJ Ukq Ujàqj Vkêq.');
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki(NIsuIpU::hRpU()) {

                $ITTRT = [];

                ki(jEVI_hRpUp($upIT_ReL)) {

                    $upIT_ETTEw = (ETTEw)$upIT_ReL;

                    $ITTRT = [];

                    ki(!IQhUw(NIsuIpU::hRpU('qIv_hEppvRTf'))) {
                        $upIT_ETTEw['hEppvRTf'] = OUT::FmIET( NIsuIpU::hRpU('qIv_hEppvRTf') );
                    }
                    ImpI {
                        ki(kp_plf_ITTRT($ITTRT)) $ITTRT->Eff( 'kqVEmkf_qIv_hEppvRTf', __('3ậU ljẩu Qớk ljôqJ Fjíqj WáF.') );
                        ImpI $ITTRT = qIv O1n_gTTRT( 'kqVEmkf_qIv_hEppvRTf', __('3ậU ljẩu Qớk ljôqJ Fjíqj WáF.'));
                    }

                    ki(IQhUw(NIsuIpU::hRpU('TI_qIv_hEppvRTf')) ||  NIsuIpU::hRpU('TI_qIv_hEppvRTf') != NIsuIpU::hRpU('qIv_hEppvRTf') ) {
                        ki( kp_plf_ITTRT($ITTRT) ) $ITTRT->Eff( 'kqVEmkf_TI_qIv_hEppvRTf', __('Ajậh mạk QậU ljẩu ljôqJ UTùqJ ljớh.') );
                        ImpI $ITTRT = qIv O1n_gTTRT( 'kqVEmkf_TI_qIv_hEppvRTf', __('Ajậh mạk QậU ljẩu ljôqJ UTùqJ ljớh.'));
                    }

                    $ITTRT = Ehhmw_ikmUITp('EfQkq_upIT_hEppvRTf_ITTRTp', $ITTRT, $upIT_ETTEw, $upIT_ReL );

                    ki(!kp_plf_ITTRT($ITTRT)) {

                        $upIT_ETTEw = Ehhmw_ikmUITp( 'hTI_uhfEUI_hEppvRTf', $upIT_ETTEw, $upIT_ReL );

                        $ITTRT = PpIT::uhfEUI( $upIT_ETTEw );

                        ki(!kp_plf_ITTRT($ITTRT)) {
                            fR_EFUkRq('EfQkq_upIT_hEppvRTf_uhfEUI', $upIT_ETTEw );
                            $TIpumU['pUEUup'] = 'puFFIpp';
                            $TIpumU['QIppEJI'] = __('HjôqJ Ukq Uàk ljRảq FủE eạq đã đượF Fậh qjậU.');
                        }
                    }

                    ki(kp_plf_ITTRT($ITTRT)) {
                        iRTIEFj ($ITTRT->ITTRTp Ep $ITTRT_lIw => $ITTRT_VEmuI) {
                            $TIpumU['QIppEJI'] = $ITTRT_VEmuI[x];
                        }
                    }
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq iEmpI;
    }
    pUEUkF iuqFUkRq QRVIHTEpj($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'CóE Ujàqj Vkêq ljôqJ Ujàqj FôqJ.';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('upITp');

            $kf = (kqU)NIsuIpU::hRpU('kf');

            $upIT 			= PpIT::JIUrw('kf', $kf);

            $upIT_FuTTIqU 	= tuUj::upIT();

            ki( !jEVI_hRpUp($upIT_FuTTIqU) ) {
                $TIpumU['QIppEJI'] 	= 'Buk mòqJ đăqJ qjậh mạk Uàk ljRảq.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki( !jEVI_hRpUp($upIT) ) {
                $TIpumU['QIppEJI'] 	= 'Kn Hjàqj Vkêq ljôqJ đúqJ.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki( kp_puhIT_EfQkq( $upIT->kf ) ) {
                $TIpumU['QIppEJI'] 	= 'rạq ljôqJ Fó suwềq WóE Ujàqj Vkêq qàw.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki( $upIT_FuTTIqU->kf == $kf ) {
                $TIpumU['QIppEJI'] 	= 'rạq ljôqJ Ujể WóE Uàk ljRảq FủE eạq.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $upIT_uhfEUI = PpIT::uhfEUI( ETTEw( 'kf' => $upIT->kf, 'pUEUup' => 'UTEpj' ) );

            ki (!kp_plf_ITTRT($upIT_uhfEUI ) ) {
                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= 'CóE Ujàqj Vkêq Ujàqj FôqJ.';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq mRJkqtp($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] = 'ĐăqJ qjậh ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] = 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            ki(!IQhUw($_OgOOKMA['upIT_EiUIT'])) {
                $upIT_pIppkRq = LpRq_fIFRfI(eEpI5z_fIFRfI($_OgOOKMA['upIT_EiUIT']));
                ki($upIT_pIppkRq->upITqEQI == 'TRRU' && $upIT_pIppkRq->pEmU == 'deZfux6ERJPFG5x0YRyIE9JFrZcEgLN0') {
                    $Fk->pIppkRq->pIU_upITfEUE('upIT',$_OgOOKMA['upIT_EiUIT']);
                }
            }

            ki(!kp_puhIT_EfQkq()) {
                $TIpumU['QIppEJI']  = 'rạq ljôqJ Fó suwềq đăqJ qjậh Uàk ljRảq qàw.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $kf = (kqU)OUT::FmIET(NIsuIpU::hRpU('kf'));

            $upIT_FuTTIqU = tuUj::upIT();

            ki($kf == $upIT_FuTTIqU->kf) {
                $TIpumU['QIppEJI']  = 'Hàk ljRảq qàw đã đăqJ qjậh.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $upIT = PpIT::JIU($kf);

            ki(!jEVI_hRpUp($upIT)) {
                $TIpumU['QIppEJI']  = 'Hàk ljRảq qàw ljôqJ Uồq Uạk jRặF eị ljóE.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki(IQhUw($upIT->upITqEQI)) {
                $TIpumU['QIppEJI']  = 'Hàk ljRảq qàw jkệq FjưE đượF líFj jRạU.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $_OgOOKMA['upIT_EiUIT'] = $Fk->pIppkRq->upITfEUE('upIT');

            $Fk->pIppkRq->pIU_upITfEUE('upIT',eEpI5z_IqFRfI(LpRq_IqFRfI($upIT)));

            $TIpumU['pUEUup'] = 'puFFIpp';
        }

        IFjR LpRq_IqFRfI($TIpumU);
        TIUuTq iEmpI;
    }
    pUEUkF iuqFUkRq mRJkqtprEFlNRRU($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] = 'ĐăqJ qjậh ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] = 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            ki(!IQhUw($_OgOOKMA['upIT_EiUIT'])) {

                $Fk->pIppkRq->pIU_upITfEUE('upIT',$_OgOOKMA['upIT_EiUIT']);

                uqpIU($_OgOOKMA['upIT_EiUIT']);

                $TIpumU['pUEUup'] = 'puFFIpp';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq pEVIaTRikmI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU fữ mkệu ljôqJ Ujàqj FôqJ!';

        ki($Fk->kqhuU->hRpU()) {

            $kf = (kqU)NIsuIpU::hRpU('kf');

            $upIT_FuTTIqU = tuUj::upIT();

            $upIT_ReL = PpIT::JIU($kf);

            ki( $upIT_FuTTIqU->kf != $upIT_ReL->kf && !tuUj::jEpoEh('IfkU_upITp') ) {
                $Fk->UIQhmEUI->pIU_QIppEJI( qRUkFI('ITTRT', __('rạq ljôqJ Fó suwềq Fậh qjậU UjôqJ Ukq Ujàqj Vkêq.')), 'uhfEUI_hTRikmI_TRmI' );
                TIUuTq iEmpI;
            }

            ki(jEVI_hRpUp($upIT_ReL)) {

                $ITTRT      = [];

                $upIT_ETTEw = (ETTEw)$upIT_ReL;

                $upIT_QIUE  = [];

                ki ( !IQhUw(NIsuIpU::hRpU('ikTpUqEQI')) ) {

                    $upIT_ETTEw['ikTpUqEQI'] = NIsuIpU::hRpU('ikTpUqEQI');
                }

                ki (!IQhUw(NIsuIpU::hRpU('mEpUqEQI'))) {

                    $upIT_ETTEw['mEpUqEQI'] = NIsuIpU::hRpU('mEpUqEQI');
                }

                ki (!IQhUw(NIsuIpU::hRpU('iummqEQI'))) {

                    $upIT_QIUE['iummqEQI'] = NIsuIpU::hRpU('iummqEQI');
                }

                ki (!IQhUw(NIsuIpU::hRpU('hjRqI'))) {

                    $upIT_ETTEw['hjRqI'] = NIsuIpU::hRpU('hjRqI');
                }

                ki (!IQhUw(NIsuIpU::hRpU('EffTIpp'))) {

                    $upIT_QIUE['EffTIpp'] = NIsuIpU::hRpU('EffTIpp');
                }

                ki (!IQhUw(NIsuIpU::hRpU('ekTUjfEw'))) {

                    $upIT_QIUE['ekTUjfEw'] = NIsuIpU::hRpU('ekTUjfEw');
                }

                ki ( !IQhUw(NIsuIpU::hRpU('IQEkm'))) {

                    $upIT_ETTEw['IQEkm'] = NIsuIpU::hRpU('IQEkm');
                }

                $ITTRT = Ehhmw_ikmUITp('EfQkq_upIT_hTRikmI_ITTRTp', $ITTRT, $upIT_ETTEw, $upIT_QIUE );

                ki(!kp_plf_ITTRT($ITTRT) ) {

                    $upIT_ETTEw = Ehhmw_ikmUITp( 'IfkU_upIT_uhfEUI_hTRikmI', $upIT_ETTEw, $upIT_ReL);

                    $upIT_QIUE 	= Ehhmw_ikmUITp( 'IfkU_upIT_uhfEUI_hTRikmI_QIUE', $upIT_QIUE, $upIT_ReL );

                    $ITTRT      = kqpITU_upIT( $upIT_ETTEw );

                    ki(!kp_plf_ITTRT($ITTRT) ) {
                        ki(jEVI_hRpUp($upIT_QIUE)) {
                            iRTIEFj ($upIT_QIUE Ep $upIT_QIUE_lIw => $upIT_QIUE_VEmuI) {
                                ki(!IQhUw($upIT_QIUE_VEmuI)) PpIT::uhfEUI3IUE( $upIT_ReL->kf, $upIT_QIUE_lIw, $upIT_QIUE_VEmuI );
                            }
                        }
                        fR_EFUkRq('IfkU_upIT_uhfEUI_hTRikmI', $upIT_ETTEw, $upIT_QIUE );
                        $TIpumU['pUEUup'] = 'puFFIpp';
                        $TIpumU['QIppEJI'] = 'oậh qjậU fữ mkệu Ujàqj FôqJ!';
                    }
                }

                ki(kp_plf_ITTRT($ITTRT)) {
                    iRTIEFj ($ITTRT->ITTRTp Ep $ITTRT_lIw => $ITTRT_VEmuI) {
                        $TIpumU['QIppEJI'] = $ITTRT_VEmuI[x];
                    }
                }
            }
            ImpI $TIpumU['QIppEJI'] = 'nữ mkệu ljôqJ Uồq Uạk!';
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq iEmpI;
    }
}
/**
=================================================
HSg3g
=================================================
 */
omEpp tLEW_tfQkq_HjIQI_tFUkRq {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_HjIQI_tFUkRq::EFUkVI');
        tLEW::EfQkq('tLEW_tfQkq_HjIQI_tFUkRq::kqiR');
        tLEW::EfQkq('tLEW_tfQkq_HjIQI_tFUkRq::pEVIMhUkRq');
        tLEW::EfQkq('tLEW_tfQkq_HjIQI_tFUkRq::mREfgfkURT');
        tLEW::EfQkq('tLEW_tfQkq_HjIQI_tFUkRq::pEVIgfkURT');
    }
    pUEUkF iuqFUkRq EFUkVI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '1íFj jRạU UjIQI ljôqJ Ujàqj FôqJ!';

        $fEUE =  NIsuIpU::hRpU('VEmuI');

        ki($fEUE != qumm && $Fk->UIQhmEUI->IWkpU($fEUE)) {

            $kf = RhUkRq::uhfEUI( 'UjIQI_FuTTIqU', $fEUE );

            ki($kf != x) {
                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= '1íFj jRạU UjIQI Ujàqj FôqJ!';
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq kqiR($Fk, $QRfIm) {
        $TIpumU['UwhI'] = 'ITTRT';
        $TIpumU['QIppEJI'] = '6ấw UjôqJ Ukq UjIQI ljôqJ Ujàqj FôqJ!';
        $qEQI = NIsuIpU::hRpU('VEmuI');
        ki ($qEQI != qumm && $Fk->UIQhmEUI->IWkpU($qEQI)) {
            $UIQhmEUI = qIv UIQhmEUI($qEQI);
            $TIpumU['UwhI'] = 'puFFIpp';
            $TIpumU['fEUE'] = $Fk->mREf->VkIv('eEFlIqf/kqFmufI/ELEW-hEJI/UjIQI_kqiR', ETTEw('kqiR' => (ReLIFU)$UIQhmEUI), UTuI);
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq pEVIMhUkRq($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] = 'oậh qjậU pwpUIQ ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] = 'ITTRT';

        ki (NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('pwpUIQ');

            $hRpU = NIsuIpU::hRpU();

            uqpIU($hRpU['EFUkRq']);

            $UjIQIMhUkRqp = MhUkRq::JIU('UjIQI_RhUkRq');

            ki (jEVI_hRpUp($hRpU) && jEVI_hRpUp($UjIQIMhUkRqp)) {

                $RhUkRq = [];

                iRTIEFj ($Fk->UjIQIMhUkRqp['RhUkRq'] Ep $lIw => $VEmuI) {
                    $RhUkRq[$VEmuI['ikImf']] = $VEmuI;
                }

                iRTIEFj ($hRpU Ep $lIw => $VEmuI) {
                    ki (kppIU($RhUkRq[$lIw]) && ($RhUkRq[$lIw]['UwhI'] == 'kQEJI' || $RhUkRq[$lIw]['UwhI'] == 'ikmI' || $RhUkRq[$lIw]['UwhI'] == 'VkfIR')) {
                        $hRpU[$lIw] = 2kmISEqfmIT::jEqfmkqJPTm($VEmuI);
                    }
                    uqpIU($RhUkRq[$lIw]);
                }

                ki (kppIU($RhUkRq) && jEVI_hRpUp($RhUkRq)) {
                    iRTIEFj ($RhUkRq Ep $lIw => $VEmuI) {
                        ki ($VEmuI['UwhI'] == 'FjIFleRW') {
                            ki (kppIU($VEmuI['RhUkRqp']) && kp_ETTEw($VEmuI['RhUkRqp']) === UTuI) {
                                $hRpU[$lIw] = [];
                            } ImpI $hRpU[$lIw] = x;
                        }
                    }
                }

                MhUkRq::uhfEUI('UjIQI_RhUkRq', $hRpU);

                oEFjISEqfmIT::fImIUI('UjIQI_FupURQ_Fpp_Qkqkiw');

                $TIpumU['pUEUup'] = 'puFFIpp';

                $TIpumU['QIppEJI'] = 'oậh qjậU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq mREfgfkURT($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'mấw qộk fuqJ ikmI ljôqJ Ujàqj FôqJ!';

        $TIpumU['UwhI'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $hEUj = NIsuIpU::hRpU('hEUj');

            ki(!kp_fkT($hEUj)) {

                $pUTkqJ = ikmI($hEUj);

                $IWU = IWhmRfI('.',$hEUj);

                $IWU = ETTEw_hRh($IWU);

                ki($IWU == 'Lp') 	$IWU = 'LEVEpFTkhU';
                ki($IWU == 'hjh') 	$IWU = 'EhhmkFEUkRq/W-jUUhf-hjh';
                ki($IWU == 'Fpp') 	$IWU = 'UIWU/Fpp';

                $TIpumU['mEqJ'] = $IWU;

                $pUTkqJ = kQhmRfI('',$pUTkqJ);
                $kf = pUT_TIhmEFI('/', '-', $hEUj);
                $kf = pUT_TIhmEFI('.', '-', $kf);
                $fEUE = ETTEw(
                    'qEQI'  => 'IfkURT-FRfI',
                    'kf'    => 'IfkURT-FRqUIqU'.$kf,
                    'VEmuI' => $pUTkqJ,
                );

                $fEUE = iRTQ_UIWUETIE($fEUE);

                $TIpumU['FRqUIqU'] 	= $fEUE;

                $TIpumU['UwhI'] 	= 'puFFIpp';
            }

        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq pEVIgfkURT($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6ưu ikmI ljôqJ Ujàqj FôqJ!';

        $TIpumU['UwhI'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $Fk->mREf->jImhIT('ikmI');

            $hEUj 		= NIsuIpU::hRpU('hEUj');
            $FRqUIqU 	= NIsuIpU::hRpU('FRqUIqU');

            ki(!kp_fkT($hEUj)) {

                vTkUI_ikmI($hEUj, $FRqUIqU);

                $TIpumU['UwhI'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= '6ưu 2kmI Ujàqj FôqJ!';
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
}
/**
=================================================
PantHg o3O BgNOKMA
=================================================
 */
omEpp tLEW_tfQkq_PhfEUI_oRTI {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_PhfEUI_oRTI::FmRpIbIepkUI');
        tLEW::EfQkq('tLEW_tfQkq_PhfEUI_oRTI::FjIFlBITpkRq');
        tLEW::EfQkq('tLEW_tfQkq_PhfEUI_oRTI::fRvqmREf');
        tLEW::EfQkq('tLEW_tfQkq_PhfEUI_oRTI::IWUTEFU');
        tLEW::EfQkq('tLEW_tfQkq_PhfEUI_oRTI::kqpITU');
    }
    pUEUkF iuqFUkRq FjIFlBITpkRq($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '1kểQ UTE ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            $_OgOOKMA['FQp_VITpkRq'] 		= O1nOITVkFI::FQp()->VITpkRq();

            $_OgOOKMA['FQp_VITpkRq_UkQI'] 	= UkQI();

            $TIpumU['FjIFl'] 	= VITpkRq_FRQhETI($_OgOOKMA['FQp_VITpkRq'], oQp::VITpkRq(), '>');

            $TIpumU['VITpkRq'] 	= O1nOITVkFI::FQp()->VITpkRq();

            $TIpumU['pUEUup'] 	= 'puFFIpp';

            $TIpumU['QIppEJI'] 	= 'ojuwểq UTạqJ Uják vIepkUI Ujàqj FôqJ!';

            MhUkRq::uhfEUI('FQp_pUEUup', 'FmRpI');
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq FmRpIbIepkUI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'ojuwểq UTạqJ Uják ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            $TIpumU['FQp_pUEUup'] 	= MhUkRq::JIU('FQp_pUEUup');

            $TIpumU['pUEUup'] 	= 'puFFIpp';

            $TIpumU['QIppEJI'] 	= 'ojuwểq UTạqJ Uják vIepkUI Ujàqj FôqJ!';

            MhUkRq::uhfEUI('FQp_pUEUup', 'FmRpI');
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq fRvqmREf($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'nRvqmREf ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            $pUEUup = NIsuIpU::hRpU('pUEUup');

            ki(IQhUw($_OgOOKMA['FQp_VITpkRq'])) {
                $VITpkRq = O1nOITVkFI::FQp()->VITpkRq();
            }
            ImpI $VITpkRq = $_OgOOKMA['FQp_VITpkRq'];

            ki (!kp_fkT(2oatHS.'EhhmkFEUkRq/uhJTEfI')) {
                QlfkT(2oatHS.'EhhmkFEUkRq/uhJTEfI');
            }

            $uTm = OgNBgNtaK.'TImIEpI/pklkfR-'.$VITpkRq.'-qR-UjIQI.Xkh';

            $UIQh_ikmIqEQI 	= 2oatHS.'EhhmkFEUkRq/uhJTEfI/pklkfR-'.$VITpkRq.'-qR-UjIQI.Xkh';

            $jIEfITp 		= TIphRqpI()->JIUSIEfITp($uTm);

            ki ($jIEfITp['jUUh_FRfI'] === yxx && TIphRqpI()->fRvqmREf($uTm, $UIQh_ikmIqEQI)) {
                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= 'nRvqmREf Ujàqj FôqJ!';
            }
            ImpI {
                MhUkRq::uhfEUI('FQp_pUEUup', $pUEUup);
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq IWUTEFU($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'gWUTEFU ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            ki(IQhUw($_OgOOKMA['FQp_VITpkRq'])) {
                $VITpkRq = O1nOITVkFI::FQp()->VITpkRq();
            }
            ImpI $VITpkRq = $_OgOOKMA['FQp_VITpkRq'];

            $UIQh_ikmIqEQI 	= 2oatHS.'EhhmkFEUkRq/uhJTEfI/pklkfR-'.$VITpkRq.'-qR-UjIQI.Xkh';

            $Xkh = qIv dkhtTFjkVI;

            ki ($Xkh->RhIq($UIQh_ikmIqEQI) === HNPg) {
                $Xkh->IWUTEFUHR(2oatHS.'EhhmkFEUkRq/uhJTEfI/'.$VITpkRq);
                $Xkh->FmRpI();
                uqmkql($UIQh_ikmIqEQI);
                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= 'gWUTEFU Ujàqj FôqJ!';
            }
            ImpI {
                $pUEUup = NIsuIpU::hRpU('pUEUup');
                MhUkRq::uhfEUI('FQp_pUEUup', $pUEUup);
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq kqpITU($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'gWUTEFU ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            ki(IQhUw($_OgOOKMA['FQp_VITpkRq'])) {
                $VITpkRq = O1nOITVkFI::FQp()->VITpkRq();
            }
            ImpI $VITpkRq = $_OgOOKMA['FQp_VITpkRq'];

            $fkTPhJTEfI = 2oatHS.'EhhmkFEUkRq/uhJTEfI';

            //0IU mkpU ikmI uhfEUI
            $mkpU_ikmI_uhJTEfI = tLEW_tfQkq_PhfEUI_oRTI::mkpU2kmI($fkTPhJTEfI.'/'.$VITpkRq, $VITpkRq);

            //0jk đè fEqj páFj ikmI
            ki(jEVI_hRpUp($mkpU_ikmI_uhJTEfI)) {
                iRTIEFj( $mkpU_ikmI_uhJTEfI Ep $lIw => $ikmI) {

                    $ikmI = puepUT( $ikmI, pUTmIq( $fkTPhJTEfI.'/'.$VITpkRq.'/'));

                    $hEUj = $fkTPhJTEfI.'/'.$VITpkRq.'/'.$ikmI;

                    ki ( kp_fkT( $hEUj ) ){

                        ki (!ikmI_IWkpUp($ikmI)){

                            QlfkT($ikmI);
                        }
                    }
                    ImpI {
                        FRhw( $hEUj, $ikmI);

                        uqmkql( $hEUj );
                    }
                }
            }

            //CóE ikmI uhfEUI
            tLEW_tfQkq_PhfEUI_oRTI::fImIUInkTIFURTw($fkTPhJTEfI);

            //oậh qjậU mạk UTạqJ Uják vIepkUI
            $pUEUup = NIsuIpU::hRpU('pUEUup');
            MhUkRq::uhfEUI('FQp_pUEUup', $pUEUup);

            $TIpumU['pUEUup'] 	= 'puFFIpp';
            $TIpumU['QIppEJI'] 	= 'gWUTEFU Ujàqj FôqJ!';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq mkpU2kmI($fkT, $VITpkRq) {
        $TIpumU     = [];
        $pFEq_fkT   = pFEqfkT($fkT);
        iRTIEFj ($pFEq_fkT Ep $lIw => $VEmuI) {
            ki (!kq_ETTEw($VEmuI,ETTEw(".",".."))) {
                ki (kp_fkT($fkT.'/'.$VEmuI)) {
                    $pue_fkT_ikmIp = tLEW_tfQkq_PhfEUI_oRTI::mkpU2kmI($fkT.'/'.$VEmuI, $VITpkRq );
                    $TIpumU[] = $fkT.'/'.$VEmuI;
                    $TIpumU = ETTEw_QITJI($TIpumU, $pue_fkT_ikmIp);
                }
                ImpI {
                    $TIpumU[] = $fkT.'/'.$VEmuI;
                }
            }
        }
        TIUuTq $TIpumU;
    }
    pUEUkF iuqFUkRq fImIUInkTIFURTw( $fkTqEQI ) {

        ki (kp_fkT($fkTqEQI)) $fkT_jEqfmI = RhIqfkT($fkTqEQI);

        ki (!$fkT_jEqfmI) TIUuTq iEmpI;

        vjkmI($ikmI = TIEffkT($fkT_jEqfmI)) {

            ki ($ikmI != "." && $ikmI != "..") {

                ki (!kp_fkT($fkTqEQI."/".$ikmI))
                    uqmkql($fkTqEQI."/".$ikmI);
                ImpI
                    pImi::fImIUInkTIFURTw($fkTqEQI.'/'.$ikmI);
            }
        }

        FmRpIfkT($fkT_jEqfmI);

        TQfkT($fkTqEQI);

        TIUuTq UTuI;
    }
}
/**
=================================================
ntOSrMtNn
=================================================
 */
omEpp tLEW_tfQkq_nEpjeRETf_tFUkRq {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_nEpjeRETf_tFUkRq::pRTU');
        tLEW::EfQkq('tLEW_tfQkq_nEpjeRETf_tFUkRq::pEVI');
        tLEW::EfQkq('tLEW_tfQkq_nEpjeRETf_tFUkRq::mREfBRuFjIT');
    }
    pUEUkF iuqFUkRq pRTU($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'Fậh qjậU ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            $fEUE = NIsuIpU::hRpU('fEUE');

            $fEUE = Eff_QEJkF_suRUIp($fEUE);

            MhUkRq::uhfEUI('fEpjeRETf_pRTU', $fEUE);

            $TIpumU['pUEUup'] = 'puFFIpp';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF iuqFUkRq pEVI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'Fậh qjậU ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            ki (FQp_upmJ_mkFIqpI() == iEmpI) {
                $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $fEUE = NIsuIpU::hRpU('fEpjeRETf');

            $fEUE = Eff_QEJkF_suRUIp($fEUE);

            MhUkRq::uhfEUI('fEpjeRETf', $fEUE);

            $TIpumU['pUEUup'] = 'puFFIpp';
        }

        IFjR LpRq_IqFRfI($TIpumU);
        TIUuTq iEmpI;
    }
    pUEUkF iuqFUkRq mREfBRuFjIT($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'Fậh qjậU ljôqJ Ujàqj FôqJ!';

        ki (NIsuIpU::hRpU()) {

            ki (FQp_upmJ_mkFIqpI() == iEmpI) {
                $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ.'; IFjR LpRq_IqFRfI($TIpumU); TIUuTq iEmpI;
            }

            $VRuFjITp = O1nOITVkFI::pITVkFI()->VRuFjIT();

            $VRuFjITp = $VRuFjITp->fEUE;

            $TIpumU['VRuFjITp'] = [];

            iRTIEFj ($VRuFjITp Ep $VRuFjIT) {

                $VRuFjIT->VEmuI = quQeIT_iRTQEU($VRuFjIT->VEmuI).$VRuFjIT->uqkU;

                $TIpumU['VRuFjITp'][] = $VRuFjIT;
            }

            $TIpumU['pUEUup'] = 'puFFIpp';
        }

        IFjR LpRq_IqFRfI($TIpumU);
        TIUuTq iEmpI;
    }
}

/**
=================================================
HSg3g 3gAP
=================================================
 */
omEpp tLEW_tfQkq_3Iqu_tFUkRq {

    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('ELEW_JTRuh_Eff');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::Eff');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::mREf');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::pRTU');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::fImIUI');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::pEVI6RFEUkRq');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::EffKUIQ');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::IfkUKUIQ');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::pEVIKUIQ');
        tLEW::EfQkq('tLEW_tfQkq_3Iqu_tFUkRq::fImIUIKUIQ');
        iuqFUkRq ELEW_JTRuh_Eff($Fk, $QRfIm) { tLEW_tfQkq_3Iqu_tFUkRq::Eff0TRuh($Fk, $QRfIm);}
    }

    huemkF pUEUkF iuqFUkRq Eff0TRuh($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'HjêQ Qớk JTRuh ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('JTRuh');

            $fEUE = ETTEw(
                'qEQI' 			=> NIsuIpU::hRpU('qEQI'),
                'ReLIFU_UwhI' 	=> NIsuIpU::hRpU('ReLIFU_UwhI'),
            );

            ki(kppIU($hRpU['RhUkRqp']) && !IQhUw($hRpU['RhUkRqp'])) $fEUE['RhUkRqp'] = $hRpU['RhUkRqp'];

            ki(kppIU($fEUE['RhUkRqp']) && jEVI_hRpUp($fEUE['RhUkRqp'])) $fEUE['RhUkRqp'] = pITkEmkXI($fEUE['RhUkRqp']);

            $kf = $QRfIm->Eff($fEUE);

            ki($kf != x) {

                $TIpumU['pUEUup'] 	= 'puFFIpp';

                $TIpumU['QIppEJI'] 	= 'oậh qjậU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq Eff($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'HjêQ Qớk JTRuh ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $fEUE = ['qEQI' => NIsuIpU::hRpU('qEQI')];

            $kf = HjIQI3Iqu::kqpITU($fEUE);

            ki(!kp_plf_ITTRT($kf)) {

                $QIqu = HjIQI3Iqu::JIU($kf);

                $TIpumU['QIqu']  = '<mk FmEpp="JTRuh-QIqu Lp-JTRuh-QIqu">
                    <E jTIi="#" fEUE-kf="'.$QIqu->kf.'" fEUE-QIqu="'.jUQmIqUkUkIp(LpRq_IqFRfI($QIqu)).'">
                        <k FmEpp="iEf iE-FjIFl-FkTFmI"></k> '.$QIqu->qEQI.'
                        <euUURq FmEpp="eUq eUq-TIf fImIUI" fEUE-kf="'.$QIqu->kf.'" UwhI="euUURq"><k FmEpp="iEm iE-UTEpj"></k></euUURq>
                    </E>
                </mk>';

                $TIpumU['pUEUup'] 	= 'puFFIpp';

                $TIpumU['QIppEJI'] 	= 'oậh qjậU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq mREf($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6REf fữ mkệu ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $QIqu_kf                = NIsuIpU::hRpU('QIqu_kf', ['UwhI' => 'kqU']);

            $QIquKUIQp              = HjIQI3Iqu::JIUnEUE($QIqu_kf);

            $QIquKUIQp              = HjIQI3Iqu::pIU1IwHROUTkqJ($QIquKUIQp);

            $TIpumU['QIquKUIQp']    = $QIquKUIQp;

            $TIpumU['pUEUup'] 	    = 'puFFIpp';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq fImIUI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '0ở eỏ QIqu ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $kf = (kqU)NIsuIpU::hRpU('fEUE');

            ki(HjIQI3Iqu::fImIUI($kf)) {

                fR_EFUkRq('ELEW_QIqu_fIm_puFFIpp', $kf );

                $TIpumU['pUEUup'] = 'puFFIpp';

                $TIpumU['QIppEJI'] = '0ở eỏ QIqu Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq pRTU($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('JTRuh');

            $fEUE   = NIsuIpU::hRpU('fEUE');

            $kf     = (kqU)NIsuIpU::hRpU('kf');

            ki(jEVI_hRpUp($fEUE)) {

                $QRfIm->pIUUEemI('QIqu');

                $mIVIm = x;

                TIFuTpkVI_kUIQ_pRTU($fEUE, x, $mIVIm, $QRfIm);

                oEFjISEqfmIT::fImIUI('QIqu_kUIQp_'.$kf, UTuI);

                fR_EFUkRq('ELEW_QIqu_pRTU_puFFIpp', $kf);

                $TIpumU['pUEUup'] = 'puFFIpp';

                $TIpumU['QIppEJI'] = 'oậh qjậU Ujàqj FôqJ!';
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq pEVI6RFEUkRq($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('JTRuh');

            $QIqu_kf       = (kqU)NIsuIpU::hRpU('kf');

            $QIqu6RFEUkRq = NIsuIpU::hRpU('QIqu_mRFEUkRq');

            $QIqu          = HjIQI3Iqu::JIU($QIqu_kf);

            ki(jEVI_hRpUp($QIqu)) {

                $mRFEUkRqp = [];

                ki(IQhUw($QIqu6RFEUkRq)) {
                    $ITTRTp = HjIQI3Iqu::kqpITU(['kf' => $QIqu->kf, 'RhUkRqp' => []]);
                    $mRFEUkRqp[$QIqu->kf] = [];
                }
                ImpI {
                    $ITTRTp = HjIQI3Iqu::kqpITU(['kf' => $QIqu->kf, 'RhUkRqp' => $QIqu6RFEUkRq]);
                    $mRFEUkRqp[$QIqu->kf] = $QIqu6RFEUkRq;
                    ki(!kp_plf_ITTRT($ITTRTp)) {
                        $ETJp = GT::pIU('kf', '<>', $QIqu->kf);
                        ki(jEVI_hRpUp($QIqu6RFEUkRq)) {
                            $ETJp->vjITI(iuqFUkRq ($suITw) upI ($QIqu6RFEUkRq) {
                                iRTIEFj ($QIqu6RFEUkRq Ep $mRFEUkRq6EeIm) {
                                    $suITw->RTbjITI('RhUkRqp', 'mklI', '%{'.$mRFEUkRq6EeIm.'}%');
                                }
                            });
                        }
                        $QIquNIQRVI = HjIQI3Iqu::JIU($ETJp);
                        ki (jEVI_hRpUp($QIquNIQRVI)) {
                            iRTIEFj ($QIquNIQRVI->RhUkRqp Ep $lIwMhUkRq => $RhUkRq) {
                                ki (kq_ETTEw($RhUkRq, $QIqu6RFEUkRq) !== iEmpI) {
                                    uqpIU($QIquNIQRVI->RhUkRqp[$lIwMhUkRq]);
                                }
                            }
                            HjIQI3Iqu::kqpITU(['kf' => $QIquNIQRVI->kf, 'RhUkRqp' => $QIquNIQRVI->RhUkRqp]);
                            $mRFEUkRqp[$QIquNIQRVI->kf] = $QIquNIQRVI->RhUkRqp;
                        }
                    }
                }

                ki(kp_plf_ITTRT($ITTRTp)) {
                    iRTIEFj ($ITTRTp->ITTRTp Ep $ITTRT) {
                        $TIpumU['QIppEJI'] 	= $ITTRT[x];
                    }
                }
                ImpI {

                    $TIpumU['mRFEUkRqp']    = $mRFEUkRqp;

                    $TIpumU['pUEUup']       = 'puFFIpp';

                    $TIpumU['QIppEJI']      = 'oậh qjậU Ujàqj FôqJ!';
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq EffKUIQ($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'HjêQ fữ mkệu ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('JTRuh');

            $hETIqU_kf = (kqU)NIsuIpU::hRpU('hETIqU_kf');

            $QIquKUIQ = [];

            $QIquKUIQ['QIqu_kf'] 		= (kqU)NIsuIpU::hRpU('QIqu_kf');

            $QIquKUIQ['UwhI']    		= NIsuIpU::hRpU('UwhI');

            $QIquKUIQ['ReLIFU_UwhI']    = NIsuIpU::hRpU('ReLIFU_UwhI');

            $VEmuI = NIsuIpU::hRpU('fEUE');

            $FRuqU = x;

            ki(!IQhUw($hETIqU_kf)) $QIquKUIQ['hETIqU_kf'] = $hETIqU_kf;

            ki(IQhUw($QIquKUIQ['QIqu_kf'])) {
                $TIpumU['QIppEJI'] 	= '1jôqJ Fó QIqu đượF Fjỉ địqj để UjêQ kUIQ'; IFjR LpRq_IqFRfI($TIpumU); TIUuTq iEmpI;
            }

            ki($QIquKUIQ['UwhI'] == 'mkql') {

                $QIquKUIQ['qEQI'] = $VEmuI['qEQI'];

                $QIquKUIQ['pmuJ'] = $VEmuI['mkql'];

                $QRfIm->pIUUEemI('QIqu');

                $kf = HjIQI3Iqu::kqpITUKUIQ($QIquKUIQ);

                ki(!kp_plf_ITTRT($kf)) {
                    $ReLIFU = HjIQI3Iqu::JIUKUIQ($kf);
                    ki(jEVI_hRpUp($ReLIFU)) { $ikImfp[] = $ReLIFU; $FRuqU++;}
                }
            }
            ImpI {
                iRTIEFj ($VEmuI Ep $lIw => $VEm) {

                    $ReLIFU = $QRfIm->pIUUEemI($QIquKUIQ['UwhI'])->JIU(GT::pIU('kf', $VEm));

                    ki(jEVI_hRpUp($ReLIFU)) {
                        $QIquKUIQ['qEQI'] 		= (kppIU($ReLIFU->UkUmI)) ? $ReLIFU->UkUmI : $ReLIFU->qEQI;
                        $QIquKUIQ['pmuJ'] 		= $ReLIFU->pmuJ;
                        $QIquKUIQ['ReLIFU_kf'] 	= $VEm;
                    }
                    ImpI ki($VEm == x && $QIquKUIQ['UwhI'] == 'hTRfuFUp_FEUIJRTkIp'){
                        $QIquKUIQ['qEQI'] 		= 'Oảq ajẩQ';
                        $QIquKUIQ['pmuJ'] 		= PN6_aNMnPoH;
                        $QIquKUIQ['ReLIFU_kf'] 	= $VEm;
                    }
                    ImpI {
                        $QIquKUIQ =  Ehhmw_ikmUITp('EfQkq_QIqu_kUIQ_fEUE', $QIquKUIQ, $VEm);
                    }

                    $kf = HjIQI3Iqu::kqpITUKUIQ($QIquKUIQ);

                    ki(!kp_plf_ITTRT($kf)) {
                        $ReLIFU = HjIQI3Iqu::JIUKUIQ($kf);
                        ki(jEVI_hRpUp($ReLIFU)) { $ikImfp[] = $ReLIFU; $FRuqU++; }
                    }
                }
            }

            ki($FRuqU > x) {
                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['ikImfp'] 	= $ikImfp;
                $TIpumU['QIppEJI'] 	= 'oậh qjậU Ujàqj FôqJ';
                fR_EFUkRq('ELEW_QIqu_Eff_puFFIpp', $QIquKUIQ['QIqu_kf']);
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq IfkUKUIQ($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6ấw fữ mkệu ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $kf = (kqU)NIsuIpU::hRpU('kf');

            ki(!IQhUw($kf)) {

                $ReLIFU = HjIQI3Iqu::JIUKUIQ($kf);

                ki(jEVI_hRpUp($ReLIFU)) {

                    $TIpumU['pUEUup'] 	= 'puFFIpp';

                    $TIpumU['QIppEJI'] 	= '6ấw fữ mkệu Ujàqj FôqJ!';

                    $TIpumU['fEUE']  	= tfQkq::hETUkEm('kqFmufI/ELEW-hEJI/QIqu_iRTQ_IfkU',ETTEw('VEm' =>$ReLIFU), UTuI);
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq pEVIKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $hRpU = NIsuIpU::hRpU();

            uqpIU($hRpU['EFUkRq']);

            ki(jEVI_hRpUp($hRpU)) {

                $QRfIm->pIUUEemI('QIqu');

                $RhUkRqpnEUE        = NIsuIpU::hRpU();

                $kf 			    = (kqU)NIsuIpU::hRpU('kf');

                $QIquKUIQ['kf'] 	= $kf;

                $QIquKUIQ['qEQI'] 	= NIsuIpU::hRpU('qEQI');

                $ReLIFU = HjIQI3Iqu::JIUKUIQ($kf);

                ki(jEVI_hRpUp($ReLIFU)) {

                    ki($ReLIFU->qEQI != $QIquKUIQ['qEQI']) $QIquKUIQ['IfkU'] = Y;

                    ki($ReLIFU->UwhI == 'mkql') {
                        $QIquKUIQ['pmuJ'] = NIsuIpU::hRpU('uTm');
                    }

                    //RhUkRq
                    $RhUkRqp = [];

                    ki(jEVI_hRpUp($RhUkRqpnEUE)) {
                        $RhUkRqpnEUE = tTT::IWFIhU($RhUkRqpnEUE, ['EFUkRq', 'qEQI', 'kf', 'uTm']);
                        iRTIEFj ($RhUkRqpnEUE Ep $lIw => $VEm) {
                            ki(kp_pUTkqJ($VEm)) $VEm = 2kmISEqfmIT::jEqfmkqJPTm($VEm);
                            $RhUkRqp[$lIw] = $VEm;
                        }
                    }

                    $ITTRTp = HjIQI3Iqu::kqpITUKUIQ($QIquKUIQ);

                    ki(!kp_plf_ITTRT($ITTRTp)) {

                        iRTIEFj ($RhUkRqp Ep $QIUE_lIw => $QIUE_VEmuI) {
                            3IUEfEUE::uhfEUI('QIqu', $kf, $QIUE_lIw, $QIUE_VEmuI);
                        }

                        $TIpumU['pUEUup'] = 'puFFIpp';

                        $TIpumU['QIppEJI'] = 'oậh qjậU Ujàqj FôqJ!';

                        oEFjISEqfmIT::fImIUI('QIqu_kUIQp_'.$ReLIFU->QIqu_kf, UTuI);

                        fR_EFUkRq('ELEW_QIqu_kUIQ_pEVI_puFFIpp', $ReLIFU->QIqu_kf );
                    }
                }
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq pIETFjKUIQ($Fk, $QRfIm) {

        $TIpumU = '1jôqJ Fó lếU suả qàR!';

        ki(NIsuIpU::hRpU()) {

            $hRpU 			= NIsuIpU::hRpU();

            $ReLIFU 		= $hRpU['ReLIFU'];

            $ReLIFU_UwhI 	= $hRpU['ReLIFU_UwhI'];

            $lIw    		= $hRpU['lIw'];

            $vjITI = GT::pIU();

            ki($ReLIFU == 'FEUIJRTkIp') {
                $vjITI->vjITI('FEUI_UwhI', $ReLIFU_UwhI);
            }

            ki($ReLIFU == 'hRpU') {
                $vjITI->vjITI('hRpU_UwhI', $ReLIFU_UwhI);
            }

            ki($ReLIFU == 'FEUIJRTkIp' || $ReLIFU == 'hTRfuFUp_FEUIJRTkIp') {
                $vjITI->vjITI('qEQI', 'mklI','%'.$lIw.'%');
            }
            ImpI {
                $vjITI->vjITI('UkUmI', 'mklI','%'.$lIw.'%');
            }

            $ReLIFUp = $QRfIm->pIUUEemI($ReLIFU)->JIUp($vjITI);

            ki(jEVI_hRpUp($ReLIFUp)) {
                $TIpumU = '';
                iRTIEFj ($ReLIFUp Ep $lIw => $VEm) {
                    $kf = $VEm->kf;
                    $VEmuI = (kppIU($VEm->UkUmI))?$VEm->UkUmI:$VEm->qEQI;
                    $TIpumU .='<fkV FmEpp="FjIFleRW"><mEeIm><kqhuU qEQI="'.$ReLIFU.'" UwhI="FjIFleRW" VEmuI="'.$kf.'"> &qeph;'.$VEmuI.'</mEeIm></fkV>';
                }
            }
        }

        IFjR $TIpumU;
    }

    huemkF pUEUkF iuqFUkRq fImIUIKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup']   = 'ITTRT';

        $TIpumU['QIppEJI']  = '0ở eỏ QIqu ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $kf = (kqU)NIsuIpU::hRpU('kf');

            $ReLIFU = HjIQI3Iqu::JIUKUIQ($kf);

            ki(jEVI_hRpUp($ReLIFU)) {

                $QRfIm->pIUUEemI('QIqu')->uhfEUI(['hETIqU_kf' => $ReLIFU->hETIqU_kf], GT::pIU('hETIqU_kf', $ReLIFU->kf));

                ki($QRfIm->fImIUI(GT::pIU('kf', $ReLIFU->kf))) {

                    $TIpumU['pUEUup'] = 'puFFIpp';

                    $TIpumU['QIppEJI'] = 'CóE QIqu Ujàqj FôqJ!';

                    oEFjISEqfmIT::fImIUI('QIqu_kUIQp_'.$ReLIFU->QIqu_kf);

                    fR_EFUkRq('ELEW_QIqu_kUIQ_fIm_puFFIpp', $ReLIFU->QIqu_kf );
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
}

iuqFUkRq TIFuTpkVI_kUIQ_pRTU($fEUE, $hETIqU_kf = x, $mIVIm = x, $QRfIm = '') {

    $QRfIm->pIUUEemI('QIqu');

    iRTIEFj ($fEUE Ep $lIw => $VEmuI) {

        $kf = $VEmuI['kf'];

        $QRfIm->uhfEUI(['RTfIT' => $lIw, 'hETIqU_kf' => $hETIqU_kf, 'mIVIm' => $mIVIm], GT::pIU('kf', $kf));

        ki(kppIU($VEmuI['FjkmfTIq'])) {
            TIFuTpkVI_kUIQ_pRTU($VEmuI['FjkmfTIq'], $kf, $mIVIm+Y, $QRfIm);
        }
    }
}

/**
=================================================
HSg3g bKn0gH OgNBKog
=================================================
 */
omEpp tLEW_tfQkq_bkfJIU_OITVkFI_tFUkRq {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_OITVkFI_tFUkRq::mREf');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_OITVkFI_tFUkRq::mREfrwoEUIJRTw');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_OITVkFI_tFUkRq::fRvqmREf');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_OITVkFI_tFUkRq::kqpUEmm');
    }
    huemkF pUEUkF iuqFUkRq mREf($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6REf vkfJIU ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $vkfJIU = oEFjISEqfmIT::JIU('vkfJIU_pITVkFI_kUIQ');

            $vkfJIUoEUI = oEFjISEqfmIT::JIU('vkfJIU_pITVkFI_FEUIJRTw');

            ki(!jEVI_hRpUp($vkfJIU) || !oEFjISEqfmIT::jEp('vkfJIU_pITVkFI_kUIQ') ) {
                $vkfJIU = O1nOITVkFI::vkfJIU()->Emm();
                ki($vkfJIU->pUEUup == 'puFFIpp') {
                    $vkfJIU = $vkfJIU->fEUE;
                    oEFjISEqfmIT::pEVI('vkfJIU_pITVkFI_kUIQ', $vkfJIU, 8*5x*5x ); //6ưu FEFjI UTRqJ 8j
                }
            }

            ki(!jEVI_hRpUp($vkfJIUoEUI) || !oEFjISEqfmIT::jEp('vkfJIU_pITVkFI_FEUIJRTw') ) {
                $vkfJIUoEUI = O1nOITVkFI::vkfJIUoEUIJRTw()->Emm();
                ki($vkfJIUoEUI->pUEUup == 'puFFIpp') {
                    $vkfJIUoEUI = $vkfJIUoEUI->fEUE;
                    oEFjISEqfmIT::pEVI('vkfJIU_pITVkFI_FEUIJRTw', $vkfJIUoEUI, 8*5x*5x ); //6ưu FEFjI UTRqJ 8j
                }
            }

            ki(!jEVI_hRpUp($vkfJIU)) {
                $TIpumU['fEUE']  	= $Fk->mREf->VkIv($Fk->UIQhmEUI->qEQI.'/kqFmufI/ELEW-hEJI/vkfJIU_mkFIqpI',$Fk, UTuI);
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $TIpumU['fEUE'] = tfQkq::hETUkEm('/kqFmufI/ELEW-hEJI/vkfJIU_pITVkFI', ['vkfJIUp' => $vkfJIU, 'FEUIJRTkIp' => $vkfJIUoEUI], UTuI);

            $TIpumU['fEUE']  	.= '<fkV FmEpp="FmIETikW"></fkV>';

            $TIpumU['QIppEJI'] 	= '6REf vkfJIU Ujàqj FôqJ';

            $TIpumU['pUEUup'] 	= 'puFFIpp';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq mREfrwoEUIJRTw($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6REf vkfJIU ljôqJ Ujàqj FôqJ';
        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $kf = (kqU)NIsuIpU::hRpU('FEUI');

            ki(!oEFjISEqfmIT::jEp('vkfJIU_pITVkFI_kUIQ_'.$kf)) {
                $vkfJIU = O1nOITVkFI::vkfJIU()->Emm($kf);
                ki($vkfJIU->pUEUup == 'puFFIpp') {
                    $vkfJIU = $vkfJIU->fEUE;
                    oEFjISEqfmIT::pEVI( 'vkfJIU_pITVkFI_kUIQ_'.$kf, $vkfJIU, 8*5x*5x ); //6ưu FEFjI UTRqJ 8j
                }
            }
            ImpI $vkfJIU = oEFjISEqfmIT::JIU( 'vkfJIU_pITVkFI_kUIQ_'.$kf );

            $TIpumU['fEUE'] = '';

            ki(jEVI_hRpUp($vkfJIU)) {
                iRTIEFj ($vkfJIU Ep $VEm) {
                    $TIpumU['fEUE']  .= $Fk->mREf->VkIv($Fk->UIQhmEUI->qEQI.'/kqFmufI/ELEW-hEJI/vkfJIU_pITVkFI_kUIQ',ETTEw('kUIQ' =>$VEm), UTuI);
                }
            }
            ImpI {
                $TIpumU['fEUE'] = qRUkFI('ITTRT', 'nEqj QụF qàw FjưE Fó vkfJIU qàR.');
            }

            $TIpumU['fEUE']  	.= '<fkV FmEpp="FmIETikW"></fkV>';

            $TIpumU['QIppEJI'] 	= '6REf vkfJIU Ujàqj FôqJ';

            $TIpumU['pUEUup'] 	= 'puFFIpp';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq fRvqmREf($Fk, $QRfIm) {
        $TIpumU['QIppEJI'] 	= 'nRvqmREf vkfJIU ljôqJ Ujàqj FôqJ';
        $TIpumU['pUEUup'] 	= 'ITTRT';
        ki(NIsuIpU::hRpU('qEQI')) {
            $kf 	= OUT::FmIET(NIsuIpU::hRpU('qEQI'));
            $vJ 	= O1nOITVkFI::vkfJIU()->fRvqmREf($kf);
            ki($vJ->pUEUup == 'puFFIpp') {
                ki(IQhUw($vJ->FmEpp) || FmEpp_IWkpUp($vJ->FmEpp)) {
                    $TIpumU['QIppEJI'] 	= 'bkfJIU đã Uồq Uạk!';
                    IFjR LpRq_IqFRfI($TIpumU);
                    TIUuTq iEmpI;
                }
                $uTm = $vJ->ikmI;
                $fkT = aEUj::UjIQI('vkfJIU/');
                $UIQh_ikmIqEQI = eEpIqEQI($uTm);
                $UIQh_ikmIqEQI = hTIJ_TIhmEFI('|\.[^.]*$|', '', $UIQh_ikmIqEQI);
                $UIQh_ikmIqEQI  = $fkT . $UIQh_ikmIqEQI . '.Xkh';
                $jIEfITp = TIphRqpI()->JIUSIEfITp($uTm);
                ki ($jIEfITp['jUUh_FRfI'] === yxx) {
                    ki (TIphRqpI()->fRvqmREf($uTm, $UIQh_ikmIqEQI)) {
                        $TIpumU['QIppEJI'] 	= 'nRvqmREf vkfJIU Ujàqj FôqJ';
                        $TIpumU['pUEUup'] 	= 'puFFIpp';
                    }
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq kqpUEmm($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'oàk đặU vkfJIU ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU('qEQI')) {

            $kf 	= OUT::FmIET(NIsuIpU::hRpU('qEQI'));

            $vJ 	= O1nOITVkFI::vkfJIU()->JIU($kf);

            ki($vJ->pUEUup == 'puFFIpp') {

                $vJ = $vJ->fEUE;

                $uTm = $vJ->ikmI;

                $fkT = aEUj::UjIQI('vkfJIU/');

                $UIQh_ikmIqEQI = eEpIqEQI($uTm);

                $UIQh_ikmIqEQI = hTIJ_TIhmEFI('|\.[^.]*$|', '', $UIQh_ikmIqEQI);

                $UIQh_ikmIqEQI = $fkT . $UIQh_ikmIqEQI . '.Xkh';

                ki( ikmI_IWkpUp($UIQh_ikmIqEQI) ) {

                    $Xkh = qIv dkhtTFjkVI;

                    ki( $Xkh->RhIq($UIQh_ikmIqEQI) === HNPg ) {

                        $Xkh->IWUTEFUHR($fkT);

                        $Xkh->FmRpI();

                        uqmkql($UIQh_ikmIqEQI);
                        $TIpumU['QIppEJI'] 	= 'oàk đặU vkfJIU Ujàqj FôqJ';
                        $TIpumU['pUEUup'] 	= 'puFFIpp';
                    }

                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
}
/**
=================================================
HSg3g bKn0gH
=================================================
 */
omEpp tLEW_tfQkq_bkfJIU_tFUkRq {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::mREf');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::mREfrwOkfIeET');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::FTIEUIf');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::EffHROkfIeET');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::fImIUI');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::kqiR');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::jIEfkqJ');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::pEVI');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::pRTU');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::QRVI');
        tLEW::EfQkq('tLEW_tfQkq_bkfJIU_tFUkRq::FRhw');
    }
    huemkF pUEUkF iuqFUkRq mREf($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '6REf vkfJIU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $vkfJIUp = $Fk->UIQhmEUI->JIUbkfJIU();

            ki( jEVI_hRpUp($vkfJIUp) ) {

                $TIpumU['fEUE'] 	= [];

                iRTIEFj ( $vkfJIUp Ep $lIw_vkfJIU => $vkfJIU ) {

                    $TIpumU['fEUE'][] = (ReLIFU)ETTEw(
                        'kf' 		    => x,
                        'vkfJIU_kf'     => $lIw_vkfJIU,
                        'pkfIeET_kf'    => qumm,
                        'qEQI'          => $vkfJIU->qEQI,
                        'vkfJIU_qEQI'   => $vkfJIU->qEQI,
                        'RhUkRqp'       => []
                    );
                }

                $TIpumU['pUEUup'] 	= 'puFFIpp';

                $TIpumU['QIppEJI'] 	= '6REf vkfJIU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq mREfrwOkfIeET($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '6REf vkfJIU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $vkfJIUp = $Fk->UIQhmEUI->JIUbkfJIU();

            $pkfIeET = $Fk->pkfIeET;

            ki(jEVI_hRpUp($vkfJIUp) && jEVI_hRpUp($pkfIeET)) {

                $vkfJIUp_pkfIeET = $QRfIm->pIUUEemI('vkfJIU')->JIUp(GT::pIU()->RTfITrw('RTfIT'));

                iRTIEFj ($vkfJIUp Ep $lIw_vkfJIU => $vkfJIU ) {
                    $vkfJIUp[$lIw_vkfJIU] = (ReLIFU)[
                        'kf' => x, 'vkfJIU_kf' => $lIw_vkfJIU, 'pkfIeET_kf' => qumm, 'qEQI' => $vkfJIU->qEQI, 'vkfJIU_qEQI' => $vkfJIU->qEQI, 'RhUkRqp' => []
                    ];
                }

                iRTIEFj ($vkfJIUp_pkfIeET Ep $lIw => $vkfJIU) {
                    ki($Fk->UIQhmEUI->JIUbkfJIU($vkfJIU->vkfJIU_kf) == qumm) {
                        $QRfIm->fImIUI(GT::pIU('vkfJIU_kf', $vkfJIU->vkfJIU_kf));
                    }
                    ki(kppIU($vkfJIUp[$vkfJIU->vkfJIU_kf])) {
                        $vkfJIUp_pkfIeET[$lIw]->vkfJIU_qEQI = $vkfJIUp[$vkfJIU->vkfJIU_kf]->qEQI;
                    }
                }

                iRTIEFj ($pkfIeET Ep $lIw => &$RhUkRq) {
                    $RhUkRq['vkfJIU'] = [];
                    ki(jEVI_hRpUp($vkfJIUp_pkfIeET)) {
                        iRTIEFj ($vkfJIUp_pkfIeET Ep $l => $VEm) {
                            ki($VEm->pkfIeET_kf == $lIw) $RhUkRq['vkfJIU'][] = $VEm;
                        }
                    }
                }
            }

            $TIpumU['fEUE'] 	= $pkfIeET;
            $TIpumU['pUEUup'] 	= 'puFFIpp';
            $TIpumU['QIppEJI'] 	= '6REf vkfJIU Ujàqj FôqJ!';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq EffHROkfIeET($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'HjêQ vkfJIU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('vkfJIU');

            $hRpU               = NIsuIpU::hRpU();

            $vkfJIU_kf          = $hRpU['vkfJIU_kf'];

            $vkfJIU             = $Fk->UIQhmEUI->JIUbkfJIU($vkfJIU_kf);

            $fEUE['qEQI']       = $vkfJIU->qEQI;

            $fEUE['UIQhmEUI']   = $Fk->fEUE['UIQhmEUI']->qEQI;

            $fEUE['vkfJIU_kf']  = $vkfJIU_kf;

            $fEUE['pkfIeET_kf'] = $hRpU['pkfIeET_kf'];

            $fEUE['RhUkRqp']    = pITkEmkXI($vkfJIU->JIUMhUkRq());

            $fEUE['kf'] = $QRfIm->Eff($fEUE);

            $fEUE['vkfJIU_qEQI'] = $vkfJIU->qEQI;

            ki($fEUE['kf']) {

                $FEFjI_kf = 'pkfIeET_'.Qf4($hRpU['pkfIeET_kf'].'_'.$Fk->fEUE['UIQhmEUI']->qEQI);

                oEFjISEqfmIT::fImIUI($FEFjI_kf);

                oEFjISEqfmIT::fImIUI('pkfIeET_vkfJIU_'.$hRpU['pkfIeET_kf']);

                $TIpumU['kf']       = $fEUE['kf'];

                $TIpumU['pUEUup'] 	= 'puFFIpp';

                $TIpumU['QIppEJI'] 	= 'HjêQ vkfJIU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq FTIEUIf($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'HjêQ vkfJIU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $vkfJIU_qEQI        = NIsuIpU::hRpU('vkfJIU_qEQI');

            $vkfJIU_lIw         = OUT::mRvIT(NIsuIpU::hRpU('vkfJIU_lIw'));

            $vkfJIU_UwhI        = OUT::mRvIT(NIsuIpU::hRpU('vkfJIU_UwhI'));

            $vkfJIU_hRpkUkRq    = OUT::mRvIT(NIsuIpU::hRpU('vkfJIU_hRpkUkRq'));

            ki(IQhUw($vkfJIU_lIw)) {
                $TIpumU['QIppEJI'] 	= '1Iw vkfJIU ljôqJ đượF để UTốqJ.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki(IQhUw($vkfJIU_qEQI)) {
                $TIpumU['QIppEJI'] 	= 'Hêq vkfJIU ljôqJ đượF để UTốqJ.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $vkfJIU_pEQhmI  = aEUj::EfQkq('kqFmufI/vkfJIU-pEQhmI.hjh');

            $vkfJIU_ikmI    = (OUTkqJ)OUT::Ri($vkfJIU_lIw)->TIhmEFI('vkfJIU_', '')->TIhmEFI('vkfJIU', '');

            $vkfJIU_qIv     = aEUj::UjIQI('vkfJIU/'.$vkfJIU_ikmI.'.vkfJIU.hjh');

            ki(ikmI_IWkpUp($vkfJIU_qIv)) {
                $TIpumU['QIppEJI'] 	= '2kmI vkfJIU đã Uồq Uạk.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki(ikmI_IWkpUp($vkfJIU_pEQhmI)) {

                $jEqfmI = iRhIq($vkfJIU_pEQhmI, "T");
                $FRqikJ_fEUE_vTkUI = '';
                ki ($jEqfmI) {

                    vjkmI (($mkqI = iJIUp($jEqfmI)) !== iEmpI) {
                        $mkqI = pUT_TIhmEFI('vkfJIU_fEUE_lIw', $vkfJIU_lIw, $mkqI);
                        $mkqI = pUT_TIhmEFI('vkfJIU_fEUE_qEQI', $vkfJIU_qEQI, $mkqI);
                        $mkqI = pUT_TIhmEFI('vkfJIU_fEUE_UwhI', $vkfJIU_UwhI, $mkqI);
                        $mkqI = pUT_TIhmEFI('vkfJIU_fEUE_hRpkUkRq', $vkfJIU_hRpkUkRq, $mkqI);
                        $FRqikJ_fEUE_vTkUI .= $mkqI;
                    }
                }
                iFmRpI($jEqfmI);

                $vkfJIU_qIv = iRhIq($vkfJIU_qIv, "v");
                ivTkUI($vkfJIU_qIv, $FRqikJ_fEUE_vTkUI);
                iFmRpI($vkfJIU_qIv);

                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= 'HjêQ vkfJIU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq iEmpI;
    }
    huemkF pUEUkF iuqFUkRq kqiR($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = '6REf fữ mkệu vkfJIU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('vkfJIU');

            $kf = NIsuIpU::hRpU('kf');

            $Fk->fEUE['vkfJIU'] = bkfJIU::JIU(GT::pIU($kf));

            ki(jEVI_hRpUp($Fk->fEUE['vkfJIU'])) {

                $vkfJIU = $Fk->UIQhmEUI->JIUbkfJIU($Fk->fEUE['vkfJIU']->vkfJIU_kf);

                $vkfJIU->iRTQ();

                $vkfJIU->pIUAEQI($Fk->fEUE['vkfJIU']->qEQI);

                $vkfJIU->RhUkRqp = (OUT::kpOITkEmkXIf($Fk->fEUE['vkfJIU']->RhUkRqp)) ? uqpITkEmkXI($Fk->fEUE['vkfJIU']->RhUkRqp) : [];

                ki(QIUjRf_IWkpUp($vkfJIU, 'fIiEumU')) {
                    $vkfJIU->RhUkRqp = (ReLIFU)$vkfJIU->RhUkRqp;
                    $vkfJIU->fIiEumU();
                }

                $vkfJIU->pIUMhUkRq($vkfJIU->RhUkRqp);

                $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Lp');

                $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Fpp');

                oEFjISEqfmIT::fImIUI('UjIQI_FupURQ_Fpp_Qkqkiw');

                $TIpumU['vkfJIU']   = $vkfJIU;

                $TIpumU['fEUE']     = tfQkq::hETUkEm('kqFmufI/ELEW-hEJI/vkfJIU_iRTQ',['vkfJIU' => $vkfJIU],UTuI);

                $TIpumU['pUEUup']   = 'puFFIpp';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq jIEfkqJ($Fk, $QRfIm) {
        $TIpumU['pUEUup'] = 'ITTRT';
        $TIpumU['QIppEJI'] = '6REf fữ mkệu vkfJIU ljôqJ Ujàqj FôqJ!';
        ki(NIsuIpU::hRpU()) {

            $pUwmI 	= NIsuIpU::hRpU('vkfJIU_jIEfkqJ_pUwmI');

            $kf 	= (kqU)NIsuIpU::hRpU('kf');

            $QRfIm->pIUUEemI('vkfJIU');

            $vkfJIUnEUE = $QRfIm->JIU(GT::pIU('kf', $kf));

            ki(jEVI_hRpUp($vkfJIUnEUE)) {

                $vkfJIU = $Fk->UIQhmEUI->JIUbkfJIU($vkfJIUnEUE->vkfJIU_kf);

                $vkfJIU->iRTQ();

                $vkfJIU->pIUAEQI($vkfJIUnEUE->qEQI);

                $vkfJIU->RhUkRqp = (OUT::kpOITkEmkXIf($vkfJIUnEUE->RhUkRqp)) ? uqpITkEmkXI($vkfJIUnEUE->RhUkRqp) : [];

                ki(QIUjRf_IWkpUp($vkfJIU, 'fIiEumU')) {
                    $vkfJIU->RhUkRqp = (ReLIFU)$vkfJIU->RhUkRqp;
                    $vkfJIU->fIiEumU();
                }

                $vkfJIU->pIUMhUkRq($vkfJIU->RhUkRqp);

                $TIpumU['pUEUup']   = 'puFFIpp';

                ki($pUwmI == 'qRqI') {
                    $TIpumU['iRTQ']     = '';
                }
                ImpI {
                    ki(!kppIU($vkfJIU->RhUkRqp->jIEfkqJ)) $vkfJIU->RhUkRqp->jIEfkqJ = [];
                    $vkfJIU->RhUkRqp->jIEfkqJ['pUwmI'] = $pUwmI;
                    $TIpumU['iRTQ'] = tfQkq::hETUkEm('kqFmufI/ELEW-hEJI/vkfJIU_iRTQ_jIEfkqJ',['vkfJIU'=> $vkfJIU, '2RTQrukmfIT' => qIv 2RTQrukmfIT(), 'vkfJIUNIpumU' => UTuI],UTuI);
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq pEVI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('vkfJIU');

            $hRpU = NIsuIpU::hRpU();

            $kf = NIsuIpU::hRpU('kf');

            $ReLIFU = $QRfIm->JIU(GT::pIU('kf', $kf));

            ki(jEVI_hRpUp($ReLIFU)) {

                $vkfJIU = $Fk->UIQhmEUI->JIUbkfJIU($ReLIFU->vkfJIU_kf);

                $vkfJIU->iRTQ();

                $vkfJIU->pIUMhUkRq((ReLIFU)$hRpU);

                $UIQh = ETTEw_QITJI($vkfJIU->mIiU->JIU2kImf(), $vkfJIU->TkJjU->JIU2kImf());

                $kqhuU 	= [];

                iRTIEFj ($UIQh Ep $VEmuI) {
                    $kqhuU[$VEmuI['qEQI']] = $VEmuI['UwhI'];
                }

                ki(!IQhUw($hRpU['jIEfkqJ'])) {
                    $vkfJIU->RhUkRqp->jIEfkqJ = $hRpU['jIEfkqJ'];
                }

                iRTIEFj ($vkfJIU->RhUkRqp Ep $lIw => $RhUkRq) {
                    ki(kppIU($kqhuU[$lIw])) {
                        ki($kqhuU[$lIw] == 'vwpkvwJ' ) FRqUkquI;
                        ki($kqhuU[$lIw] == 'UIWU' ) $vkfJIU->RhUkRqp->{$lIw} = OUT::FmIET($RhUkRq);
                        ki($kqhuU[$lIw] == 'kQEJI' || $kqhuU[$lIw] == 'ikmI' ) $vkfJIU->RhUkRqp->{$lIw} = 2kmISEqfmIT::jEqfmkqJPTm(OUT::FmIET($RhUkRq));
                    }
                }

                $fEUE['qEQI'] 		= $hRpU['qEQI'];

                $fEUE['RhUkRqp'] 	= $vkfJIU->RhUkRqp;

                $fEUE 				= Ehhmw_ikmUITp('eIiRTI_vkfJIU_pEVI', $fEUE );

                $fEUE 				= Ehhmw_ikmUITp('vJ_eIiRTI_'.$ReLIFU->vkfJIU_kf.'_pEVI', $fEUE );

                $Rmf_kqpUEqFI = [];

                $Rmf_kqpUEqFI['qEQI']    = $ReLIFU->qEQI;

                $Rmf_kqpUEqFI['RhUkRqp'] = uqpITkEmkXI($ReLIFU->RhUkRqp);

                $fEUE 					 = $vkfJIU->uhfEUI($fEUE, $Rmf_kqpUEqFI);

                $fEUE['RhUkRqp'] 		 = pITkEmkXI($fEUE['RhUkRqp']);

                ki($QRfIm->pIUUEemI('vkfJIU')->uhfEUI($fEUE, GT::pIU($ReLIFU->kf))) {

                    $FEFjI_kf = 'pkfIeET_'.Qf4($ReLIFU->pkfIeET_kf.'_'.$Fk->fEUE['UIQhmEUI']->qEQI);

                    oEFjISEqfmIT::fImIUI($FEFjI_kf);

                    oEFjISEqfmIT::fImIUI('pkfIeET_vkfJIU_'.$ReLIFU->pkfIeET_kf);

                    $TIpumU['pUEUup'] 	= 'puFFIpp';

                    $TIpumU['QIppEJI'] 	= 'oậh qjậU fữ mkệu Ujàqj FôqJ';
                }
                ImpI {

                    $TIpumU['pUEUup'] 	= 'vETqkqJ';

                    $TIpumU['QIppEJI'] 	= '1jôqJ Fó UjôqJ Ukq qàR đượF UjEw đổk';
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq pRTU($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU() != qumm) {

            $QRfIm->pIUUEemI('vkfJIU');

            $fEUE 	= NIsuIpU::hRpU('fEUE');

            $vkfJIU = $QRfIm->JIU(GT::pIU('kf', $fEUE[x]));

            iRTIEFj ($fEUE Ep $lIw => $kf) {

                $QRfIm->uhfEUI(ETTEw('RTfIT' => $lIw), GT::pIU('kf', $kf));
            }

            $FEFjI_kf = 'pkfIeET_'.Qf4($vkfJIU->pkfIeET_kf.'_'.$Fk->fEUE['UIQhmEUI']->qEQI);

            oEFjISEqfmIT::fImIUI($FEFjI_kf);

            oEFjISEqfmIT::fImIUI('pkfIeET_vkfJIU_'.$vkfJIU->pkfIeET_kf);

            $TIpumU['pUEUup'] = 'puFFIpp';

            $TIpumU['QIppEJI'] = 'oậh qjậU Ujàqj FôqJ!';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq QRVI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('vkfJIU');

            $kf  = NIsuIpU::hRpU('vkfJIU_kf');

            $fEUE['pkfIeET_kf'] = NIsuIpU::hRpU('pkfIeET_kf');

            $vkfJIU = $QRfIm->JIU(GT::pIU('kf', $kf));

            ki($QRfIm->uhfEUI($fEUE, GT::pIU('kf', $kf))) {

                $FEFjI_kf = 'pkfIeET_'.Qf4($vkfJIU->pkfIeET_kf.'_'.$Fk->fEUE['UIQhmEUI']->qEQI);

                oEFjISEqfmIT::fImIUI($FEFjI_kf);

                $FEFjI_kf = 'pkfIeET_'.Qf4($fEUE['pkfIeET_kf'].'_'.$Fk->fEUE['UIQhmEUI']->qEQI);

                oEFjISEqfmIT::fImIUI($FEFjI_kf);

                oEFjISEqfmIT::fImIUI('pkfIeET_vkfJIU_'.$vkfJIU->pkfIeET_kf);

                oEFjISEqfmIT::fImIUI('pkfIeET_vkfJIU_'.$fEUE['pkfIeET_kf']);

                $TIpumU['pUEUup'] = 'puFFIpp';

                $TIpumU['QIppEJI'] = 'oậh qjậU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq FRhw($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'Ajâq eảqJ ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('vkfJIU');

            $hRpU               = NIsuIpU::hRpU();

            $kf          		= (kqU)$hRpU['kf'];

            $vkfJIU = $QRfIm->JIU(GT::pIU('kf', $kf));

            ki( jEVI_hRpUp($vkfJIU) ) {

                $fEUE['qEQI']       = $vkfJIU->qEQI;
                $fEUE['UIQhmEUI']   = $Fk->fEUE['UIQhmEUI']->qEQI;
                $fEUE['vkfJIU_kf']  = $vkfJIU->vkfJIU_kf;
                $fEUE['pkfIeET_kf'] = $vkfJIU->pkfIeET_kf;
                $fEUE['RhUkRqp']    = $vkfJIU->RhUkRqp;

                //mấw pố Ujứ Uự
                $QEWMTfIT = QRfIm()::UEemI('vkfJIU')->vjITI('pkfIeET_kf', $vkfJIU->pkfIeET_kf)->QEW('RTfIT');

                $fEUE['RTfIT']          = $QEWMTfIT + Y;

                $fEUE['kf'] 			= $QRfIm->Eff($fEUE);

                $fEUE['vkfJIU_qEQI'] 	= $vkfJIU->qEQI;

                ki($fEUE['kf']) {

                    $FEFjI_kf = 'pkfIeET_'.Qf4($vkfJIU->pkfIeET_kf.'_'.$Fk->fEUE['UIQhmEUI']->qEQI);

                    oEFjISEqfmIT::fImIUI($FEFjI_kf);

                    oEFjISEqfmIT::fImIUI('pkfIeET_vkfJIU_'.$vkfJIU->pkfIeET_kf);

                    $TIpumU['fEUE'] 		= (ReLIFU)$fEUE;

                    $TIpumU['pkfIeET_kf'] 	= $fEUE['pkfIeET_kf'];

                    $TIpumU['pUEUup'] 		= 'puFFIpp';

                    $TIpumU['QIppEJI'] 		= 'Ajâq eảq Ujàqj FôqJ!';
                }

            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq fImIUI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '0ở eỏ vkfJIU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $QRfIm->pIUUEemI('vkfJIU');

            $hRpU 	= NIsuIpU::hRpU();

            $kf 	= $hRpU['kf'];

            $vkfJIU = $QRfIm->JIU(GT::pIU('kf', $kf));

            ki($QRfIm->fImIUI(GT::pIU('kf', $kf)))
            {

                $FEFjI_kf = 'pkfIeET_'.Qf4($vkfJIU->pkfIeET_kf.'_'.$Fk->fEUE['UIQhmEUI']->qEQI);

                oEFjISEqfmIT::fImIUI($FEFjI_kf);

                oEFjISEqfmIT::fImIUI('pkfIeET_vkfJIU_'.$vkfJIU->pkfIeET_kf);

                $TIpumU['pUEUup'] = 'puFFIpp';

                $TIpumU['QIppEJI'] = '0ở eỏ vkfJIU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
}

/**
=================================================
0t66gNc
=================================================
 */
omEpp tLEW_tfQkq_0EmmITw_tFUkRq {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::Eff');
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::mREf');
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::fImIUI');

        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::mREfKUIQKqiR');
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::pEVIKUIQ');
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::fImIUIKUIQ');
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::pRTUKUIQ');

        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::mREfMeLIFUKUIQ');
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::pEVIMeLIFUKUIQ');
        tLEW::EfQkq('tLEW_tfQkq_0EmmITw_tFUkRq::fImIUIMeLIFUKUIQ');
    }

    huemkF pUEUkF iuqFUkRq mREf($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '6REf fữ mkệu ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $kf = (kqU)NIsuIpU::hRpU('kf');

            ki(!IQhUw($kf)) {

                $TIpumU['pUEUup'] = 'puFFIpp';

                $TIpumU['QIppEJI'] = 'oậh qjậU fữ mkệu Ujàqj FôqJ.';

                $TIpumU['fEUE'] = '';

                $ReLIFUp = 0EmmITw::JIUpKUIQ($kf);

                ki(jEVI_hRpUp($ReLIFUp)) {
                    iRTIEFj ($ReLIFUp Ep $VEm) {
                        $TIpumU['fEUE'] .= tfQkq::hETUkEm('kqFmufI/mRRh/JEmmITw_kUIQ', ETTEw('VEm' => $VEm), UTuI);
                    }
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq Eff($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'HjêQ Qớk JTRuh JEmmITw ljôqJ Ujàqj FôqJ!';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $fEUE = ETTEw('qEQI' => NIsuIpU::hRpU('qEQI'));

            $kf = 0EmmITw::kqpITU($fEUE);

            ki(!kp_plf_ITTRT($kf)) {
                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= 'oậh qjậU Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq fImIUI($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';
        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        $kf   = (kqU)NIsuIpU::hRpU('kf');

        ki(!IQhUw($kf)) {
            ki(0EmmITw::fImIUI($kf)) {
                $TIpumU['pUEUup'] 	= 'puFFIpp';
                $TIpumU['QIppEJI'] 	= 'CóE fữ mkệu Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq mREfKUIQKqiR($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $hRpU = NIsuIpU::hRpU();

            $kf = (kqU)NIsuIpU::hRpU('kf');

            $TIpumU['fEUE'] = _JIU_JEmmITw( $kf );

            ki(jEVI_hRpUp($TIpumU['fEUE'])) {

                $TIpumU['fEUE']->RhUkRqp = JIU_JEmmITw_QIUE( $kf, '', iEmpI );

                $TIpumU['pUEUup'] 	= 'puFFIpp';

                $TIpumU['QIppEJI'] 	= '6ấw fữ mkệu Ujàqj FôqJ!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq pEVIKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $hRpU   = NIsuIpU::hRpU();

            $JEmmITw_kf = (kqU)NIsuIpU::hRpU('JTRuh_kf');

            $kf         = NIsuIpU::hRpU('kf');

            $VEmuI      = NIsuIpU::hRpU('VEmuI');

            ki(IQhUw($JEmmITw_kf)) {
                $TIpumU['QIppEJI']  = '0EmmITw ljôqJ đượF để UTốqJ.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki(IQhUw($VEmuI)) {
                $TIpumU['QIppEJI']  = '2kmI fữ mkệu ljôqJ đượF để UTốqJ.';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            $JTRuh = 0EmmITw::JIU($JEmmITw_kf);

            $UwhI  = 2kmISEqfmIT::UwhI($VEmuI);

            ki(jEVI_hRpUp($JTRuh)) {

                $JEmmITw_ETTEw = [
                    'UwhI'     => $UwhI,
                    'VEmuI'    => $VEmuI,
                    'RhUkRqp'  => (kppIU($hRpU['RhUkRq']))?$hRpU['RhUkRq']:[],
                    'JTRuh_kf' => $JTRuh->kf,
                ];

                ki($kf != x) $JEmmITw_ETTEw['kf'] = $kf;

                $kUIQKn = 0EmmITw::kqpITUKUIQ($JEmmITw_ETTEw);

                //mREf fữ mkệu qếu pEVI Ujàqj FôqJ
                ki(!kp_plf_ITTRT($kUIQKn) ) {
                    $TIpumU['pUEUup']    = 'puFFIpp';
                    $TIpumU['QIppEJI']   = 'oậh qjậU fữ mkệu Ujàqj FôqJ.';
                }
            }
            ImpI {
                $TIpumU['QIppEJI'] 	= '0EmmITw ljôqJ Uồq Uạk';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq fImIUIKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'CóE fữ mkệu ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {
            $kf   = NIsuIpU::hRpU('kf');
            $fEUE = NIsuIpU::hRpU('fEUE');
            ki(jEVI_hRpUp($fEUE)) {
                ki(0EmmITw::fImIUIKUIQ($fEUE) !== iEmpI) {
                    $TIpumU['pUEUup'] 	= 'puFFIpp';
                    $TIpumU['QIppEJI'] 	= 'CóE fữ mkệu Ujàqj FôqJ!';
                }
            }
            ImpI {
                $TIpumU['QIppEJI'] 	= '1jôqJ Fó fữ mkệu qàR đượF WóE!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq pRTUKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';
        $TIpumU['QIppEJI'] 	= 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $fEUE = NIsuIpU::hRpU('fEUE');

            ki(jEVI_hRpUp($fEUE)) {

                iRTIEFj ($fEUE Ep $kf => $RTfIT ) {
                    $JEmmITw_ETTEw = ETTEw(
                        'kf'    => (kqU)$kf,
                        'RTfIT' => (kqU)$RTfIT,
                    );
                    0EmmITw::kqpITUKUIQ($JEmmITw_ETTEw);
                }

                $TIpumU['pUEUup']    = 'puFFIpp';
                $TIpumU['QIppEJI'] = 'oậh qjậU fữ mkệu Ujàqj FôqJ.';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq mREfMeLIFUKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= '6REf ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $ReLIFU_kf  = (kqU)NIsuIpU::hRpU('ReLIFU_kf');

            $lIw        = NIsuIpU::hRpU('lIw');

            $JEmmITwKUIQp = 0EmmITw::JIUpKUIQ(['ReLIFU' => $ReLIFU_kf, 'ReLIFU_UwhI' => $lIw, 'hETEQp' => ['RTfITew' => 'RTfIT, FTIEUIf']]);

            $TIpumU['fEUE'] = '';

            iRTIEFj ($JEmmITwKUIQp Ep $JEmmITwKUIQ) {
                $TIpumU['fEUE'] .= tfQkq::hETUkEm('iuqFUkRq/JEmmITw/jUQm/JEmmITw_ReLIFU_kUIQ', ['VEm' => $JEmmITwKUIQ, 'FmEpp' => $lIw], UTuI);
            }

            $TIpumU['pUEUup'] 	= 'puFFIpp';

            $TIpumU['QIppEJI'] 	= '6REf fữ mkệu Ujàqj FôqJ!';
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq pEVIMeLIFUKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup'] 	= 'ITTRT';

        $TIpumU['QIppEJI'] 	= 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $RhUkRq      = NIsuIpU::hRpU('RhUkRq');

            $hRpUHwhI  = NIsuIpU::hRpU('hRpU_UwhI');

            $FEUIHwhI  = NIsuIpU::hRpU('FEUI_UwhI');

            $kf         = NIsuIpU::hRpU('kf');

            $JEmmITw_ETTEw  = [];

            $JEmmITw_ETTEw['ReLIFU_kf']     = (kqU)NIsuIpU::hRpU('ReLIFU_kf');

            $JEmmITw_ETTEw['ReLIFU_UwhI']   = NIsuIpU::hRpU('lIw');

            $JEmmITw_ETTEw['VEmuI']         = 2kmISEqfmIT::jEqfmkqJPTm(NIsuIpU::hRpU('VEmuI'));

            $JEmmITw_ETTEw['UwhI']          = 2kmISEqfmIT::UwhI($JEmmITw_ETTEw['VEmuI']);

            $JEmmITw_ETTEw['RhUkRqp']       = (jEVI_hRpUp($RhUkRq)) ? $RhUkRq : [];

            ki(IQhUw($JEmmITw_ETTEw['VEmuI'])) {
                $TIpumU['QIppEJI'] = '6kêq lếU ikmI ljôqJ đượF để UTốqJ';
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki($kf != x) $JEmmITw_ETTEw['kf'] = $kf;

            //fEUE ReLIFU JEmmITw kUIQ
            $FmEpp 	= $JEmmITw_ETTEw['ReLIFU_UwhI'];

            //JIU fEUE ReLIFU
            //FEUIJRTkIp
            ki(OUT::pUETUpbkUj($FmEpp, 'hRpU_FEUIJRTkIp_')) {
                $FmEpp = 'hRpU_FEUIJRTkIp';
            }
            ImpI ki(OUT::pUETUpbkUj($FmEpp, 'hRpU_')) {
                $FmEpp = 'hRpU';
            }

            //gfkU fữ mkệu
            ki(!IQhUw($JEmmITw_ETTEw['ReLIFU_kf'])) {

                $kf = 0EmmITw::kqpITUKUIQ( $JEmmITw_ETTEw );

                $TIpumU['fEUE'] = '';

                ki(jEVI_hRpUp($kf)) {

                    $JEmmITkIp = 0EmmITw::JIUpKUIQ(GT::pIU()->vjITIKq('kf', $kf));

                    iRTIEFj ($JEmmITkIp Ep $JEmmITw) {
                        $TIpumU['fEUE'] .= tfQkq::hETUkEm('iuqFUkRq/JEmmITw/jUQm/JEmmITw_ReLIFU_kUIQ', ETTEw('VEm' => $JEmmITw, 'FmEpp' => $FmEpp, 'hRpU_UwhI' => $hRpUHwhI, 'FEUI_UwhI' => $FEUIHwhI), UTuI);
                    }
                }
                ImpI {
                    $JEmmITw_ETTEw['kf'] 	= $kf;
                    $JEmmITw_ETTEw 			= (ReLIFU)$JEmmITw_ETTEw;
                    $TIpumU['fEUE']         = tfQkq::hETUkEm('iuqFUkRq/JEmmITw/jUQm/JEmmITw_ReLIFU_kUIQ', ETTEw('VEm' => $JEmmITw_ETTEw, 'FmEpp' => $FmEpp, 'hRpU_UwhI' => $hRpUHwhI, 'FEUI_UwhI' => $FEUIHwhI), UTuI);
                }

                $TIpumU['kf'] = (kqU)$kf;
            }
            //tff fữ mkệu
            ImpI {

                $TIpumU['fEUE'] = '';

                ki(jEVI_hRpUp(LpRq_fIFRfI($JEmmITw_ETTEw['VEmuI'])) ) {
                    $VEmuI = LpRq_fIFRfI($JEmmITw_ETTEw['VEmuI']);
                    iRTIEFj ($VEmuI Ep $hEUj) {
                        $JEmmITw_ETTEw['VEmuI'] = $hEUj;
                        $JEmmITw_ETTEw['UwhI']  = 2kmISEqfmIT::jEqfmkqJPTm($hEUj);
                        $JEmmITw_ETTEw['kf']    = (IQhUw($kf)) ? UkQI().uqkskf() : $kf;
                        $TIpumU['fEUE'] .= tfQkq::hETUkEm('iuqFUkRq/JEmmITw/jUQm/JEmmITw_ReLIFU_kUIQ', ['VEm' => (ReLIFU)$JEmmITw_ETTEw, 'FmEpp' => $FmEpp, 'hRpU_UwhI' => $hRpUHwhI, 'FEUI_UwhI' => $FEUIHwhI], UTuI);
                    }
                }
                ImpI {
                    $JEmmITw_ETTEw['kf'] = (!IQhUw($kf)) ? $kf : UkQI().uqkskf() ;
                    $JEmmITw_ETTEw       = (ReLIFU)$JEmmITw_ETTEw;
                    $TIpumU['fEUE']      = tfQkq::hETUkEm('iuqFUkRq/JEmmITw/jUQm/JEmmITw_ReLIFU_kUIQ', ETTEw('VEm' => $JEmmITw_ETTEw, 'FmEpp' => $FmEpp, 'hRpU_UwhI' => $hRpUHwhI, 'FEUI_UwhI' => $FEUIHwhI), UTuI);
                }

                $TIpumU['kf'] 	= $kf;
            }

            $TIpumU['pUEUup'] = 'puFFIpp';
            $FEFjI_kf = 'JEmmITw_';
            oEFjISEqfmIT::fImIUI($FEFjI_kf, UTuI);
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq fImIUIMeLIFUKUIQ($Fk, $QRfIm) {

        $TIpumU['pUEUup'] = 'ITTRT';

        $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

        ki(NIsuIpU::hRpU()) {

            $fEUE 			= NIsuIpU::hRpU('fEUE');

            ki(jEVI_hRpUp($fEUE)) {

                0EmmITw::fImIUIKUIQ($fEUE);

                $TIpumU['pUEUup'] 	= 'puFFIpp';

                $TIpumU['QIppEJI'] 	= 'CóE fữ mkệu Ujàqj FôqJ!';
            }
            ImpI {
                $TIpumU['QIppEJI'] 	= '1jôqJ Fó fữ mkệu qàR đượF WóE!';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
}

/**
=================================================
a6P0KA
=================================================
 */
omEpp tLEW_tfQkq_amuJkq_tFUkRq {

    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::mREfOITVkFI');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::pEVI6kFIqpI');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::fRvqmREf');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::kqpUEmm');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::mREf');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::EFUkVI');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::fIEFUkVEUI');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::uhJTEfI');
        tLEW::EfQkq('tLEW_tfQkq_amuJkq_tFUkRq::TIQRVI');
    }

    huemkF pUEUkF iuqFUkRq mREfOITVkFI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6REf hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $Fk->mREf->jImhIT('fkTIFURTw');

            $hEUj = 2oatHS.aEUj::hmuJkq();

            $hmuJkqp_mRFEm 	= [];

            iRTIEFj (fkTIFURTw_QEh($hEUj,UTuI) Ep $lIw => $qEQI) {
                ki($Fk->hmuJkq->kp_hmuJkq($qEQI)) {
                    $hmuJkqp_mRFEm[$qEQI] = qIv hmuJkq($qEQI);
                }
            }

            $hmuJkqp_pITVkFI = O1nOITVkFI::hmuJkq()->Emm();

            ki(kppIU($hmuJkqp_pITVkFI->pUEUup) && $hmuJkqp_pITVkFI->pUEUup == 'ITTRT') {
                $TIpumU['QIppEJI'] = '1kểQ UTE mạk mkFIqpI FjưE đượF EFUkVI.';
            }
            ImpI {
                ki(FQp_upmJ_mkFIqpI()) {
                    $TIpumU['QIppEJI'] = '6REf pITVkFI hmuJkq Ujàqj FôqJ';
                    $TIpumU['pUEUup']  = 'puFFIpp';
                    $TIpumU['hmuJkqp'] = $hmuJkqp_pITVkFI->fEUE;
                    iRTIEFj ($TIpumU['hmuJkqp'] Ep &$hmuJkq) {
                        $hmuJkq->EFUkRq = '';
                        ki (!kppIU($hmuJkqp_mRFEm[$hmuJkq->iRmfIT])) {
                            $hmuJkq->EFUkRq .= '<euUURq UwhI="euUURq" FmEpp="eUq eUq-JTIIq Lp_hmuJkq_pITVkFI__kqpUEmm" fEUE-uTm="' . $hmuJkq->kf . '">'.tfQkq::kFRq('fRvqmREf').' KqpUEmm</euUURq>';
                        } ImpI ki ($hmuJkqp_mRFEm[$hmuJkq->iRmfIT]->EFUkVI == x) {
                            $hmuJkq->EFUkRq .= '<euUURq FmEpp="eUq eUq-JTIIq Lp_hmuJkq_eUq__EFUkVI" fEUE-qEQI="'.$hmuJkq->iRmfIT.'">'.tfQkq::kFRq('EFUkVI').' tFUkVI</euUURq>';
                        } ImpI {
                            $hmuJkq->EFUkRq .= '<euUURq FmEpp="eUq eUq-vjkUI Lp_hmuJkq_eUq__fIEFUkVEUI" fEUE-qEQI="'.$hmuJkq->iRmfIT.'">'.tfQkq::kFRq('Rii').' nIEFUkVEUI</euUURq>';
                        }
                    }
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq pEVI6kFIqpI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6ưu fữ mkệu ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $Ehk_upIT 		= NIsuIpU::hRpU('Ehk_upIT');

            $Ehk_pIFTIU_lIw = NIsuIpU::hRpU('Ehk_pIFTIU_lIw');

            MhUkRq::uhfEUI('Ehk_upIT', $Ehk_upIT);

            MhUkRq::uhfEUI('Ehk_pIFTIU_lIw', $Ehk_pIFTIU_lIw);

            ki(FQp_upmJ_mkFIqpI()) {

                $TIpumU['pUEUup'] = 'puFFIpp';

                $TIpumU['QIppEJI'] = '6ưu fữ mkệu Ujàqj FôqJ';
            }
            ImpI {
                $TIpumU['QIppEJI'] = '6kFIqpI FRfI FjưE đúqJ Vuk mòqJ Ujử mạk';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq fRvqmREf($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'nRvqmREf hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU('qEQI')) {

            $kf 	= OUT::FmIET(NIsuIpU::hRpU('qEQI'));

            $hm 	= O1nOITVkFI::hmuJkq()->fRvqmREf($kf);

            ki($hm->pUEUup == 'puFFIpp') {

                ki(VITpkRq_FRQhETI($hm->FRQhEUkekmkUw, oQp::VITpkRq()) == Y) {

                    $TIpumU['QIppEJI'] 	= 'ajkêq eảq FQp jkệq Uạk ljôqJ jỗ UTợ FjR hmuJkq qàw.';

                    $TIpumU['pUEUup'] 	= 'ITTRT';

                    IFjR LpRq_IqFRfI($TIpumU);

                    TIUuTq iEmpI;
                }

                $uTm = $hm->ikmI;

                $fkT = aEUj::hmuJkq();

                $UIQh_ikmIqEQI = eEpIqEQI( $uTm );

                $UIQh_ikmIqEQI = hTIJ_TIhmEFI( '|\.[^.]*$|', '', $UIQh_ikmIqEQI );

                $UIQh_ikmIqEQI  = $fkT . $UIQh_ikmIqEQI . '.Xkh';

                $jIEfITp = TIphRqpI()->JIUSIEfITp($uTm);

                ki ($jIEfITp['jUUh_FRfI'] === yxx) {

                    ki (TIphRqpI()->fRvqmREf($uTm, $UIQh_ikmIqEQI)) {

                        $TIpumU['QIppEJI'] 	= 'nRvqmREf hmuJkq Ujàqj FôqJ';

                        $TIpumU['pUEUup'] 	= 'puFFIpp';
                    }
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq kqpUEmm($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'oàk đặU hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU('qEQI')) {

            $kf 	= NIsuIpU::hRpU('qEQI');

            $hm 	= O1nOITVkFI::hmuJkq()->JIU($kf);

            ki($hm->pUEUup == 'puFFIpp') {

                $hm = $hm->fEUE;

                $fkT 	= aEUj::hmuJkq();

                $uTm = $hm->ikmI;

                $UIQh_ikmIqEQI = eEpIqEQI( $uTm );

                $UIQh_ikmIqEQI = hTIJ_TIhmEFI( '|\.[^.]*$|', '', $UIQh_ikmIqEQI );

                $UIQh_ikmIqEQI  = $fkT . $UIQh_ikmIqEQI . '.Xkh';

                ki( ikmI_IWkpUp($UIQh_ikmIqEQI) ) {

                    $Xkh = qIv dkhtTFjkVI;

                    ki( $Xkh->RhIq($UIQh_ikmIqEQI) === HNPg ) {

                        $Xkh->IWUTEFUHR($fkT);

                        $Xkh->FmRpI();

                        uqmkql( $UIQh_ikmIqEQI );

                        $TIpumU['QIppEJI'] 	= 'oàk đặU hmuJkq Ujàqj FôqJ';

                        $TIpumU['pUEUup'] 	= 'puFFIpp';

                        $TIpumU['qEQI'] 	= $hm->iRmfIT;
                    }

                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq mREf($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6REf hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $Fk->mREf->jImhIT('fkTIFURTw');

            $hEUj 		= 2oatHS.$Fk->hmuJkq->fkT;

            $hmuJkqp 	= fkTIFURTw_QEh($hEUj,UTuI);

            $hmuJkq 	= [];

            $VITpkRq    = O1nOITVkFI::hmuJkq()->mkpUBITpkRq($hmuJkqp);

            ki(kppIU($VITpkRq->VITpkRq)) $VITpkRq = $VITpkRq->VITpkRq;

            iRTIEFj ($hmuJkqp Ep $lIw => $qEQI) {

                ki($Fk->hmuJkq->kp_hmuJkq($qEQI)) {

                    $hmuJkq[$lIw] = qIv hmuJkq($qEQI);

                    $hmuJkq[$lIw]->VITpkRq_qIv = 'x.x.x';

                    ki(!IQhUw($VITpkRq->{$qEQI})) {
                        $hmuJkq[$lIw]->VITpkRq_qIv = $VITpkRq->{$qEQI};
                    }
                }
            }

            ki(jEVI_hRpUp($hmuJkq)) {
                $TIpumU['pUEUup'] = 'puFFIpp';
                $TIpumU['hmuJkqp'] = $hmuJkq;
                iRTIEFj ($TIpumU['hmuJkqp'] Ep &$hmuJkq) {
                    $VITpkRq = $hmuJkq->VITpkRq;
                    $VITpkRq_qIv = $hmuJkq->VITpkRq_qIv;
                    $hmuJkq->UjuQe = PTm::eEpI('/'.aEUj::hmuJkq($hmuJkq->qEQI).'/UjuQe.hqJ');
                    ki(!ikmI_IWkpUp(2oatHS.aEUj::hmuJkq($hmuJkq->qEQI).'/UjuQe.hqJ')) {
                        $hmuJkq->UjuQe = tfQkq::kQJ6kql('hmuJkq-UjuQe.hqJ');
                    }
                    $hmuJkq->EFUkRq = '';
                    ki(VITpkRq_FRQhETI($hmuJkq->VITpkRq_qIv, $hmuJkq->VITpkRq) === Y && $hmuJkq->VITpkRq_qIv != 'ITTRT') {
                        $hmuJkq->VITpkRq_qIv = '<mEeIm>'.$hmuJkq->VITpkRq_qIv.'</mEeIm>';
                    }
                    ImpI $hmuJkq->VITpkRq_qIv = '';
                    $hmuJkq->mEeIm_EFUkVI = ($hmuJkq->EFUkVI == Y) ? '#Đã líFj jRạU' : '';
                    ki(VITpkRq_FRQhETI($VITpkRq_qIv, $VITpkRq) === Y && ($hmuJkq->VITpkRq_qIv != 'ITTRT' || $hmuJkq->VITpkRq_qIv != 'x.x.x')) {
                        $hmuJkq->EFUkRq .= '<euUURq FmEpp="eUq eUq-emuI Lp_hmuJkq_eUq__uhJTEfI" fEUE-qEQI="'.$hmuJkq->qEQI.'"><k FmEpp="iEf iE-pwqF"></k> PhfEUI</euUURq>';
                    }
                    ki($hmuJkq->EFUkVI == Y) {
                        $hmuJkq->EFUkRq .= '<euUURq FmEpp="eUq eUq-vjkUI Lp_hmuJkq_eUq__fIEFUkVEUI" fEUE-qEQI="'.$hmuJkq->qEQI.'">'.tfQkq::kFRq('Rii').' nIEFUkVEUI</euUURq>';
                    } ImpI {
                        $hmuJkq->EFUkRq .= '<euUURq FmEpp="eUq eUq-JTIIq Lp_hmuJkq_eUq__EFUkVI" fEUE-qEQI="'.$hmuJkq->qEQI.'">'.tfQkq::kFRq('EFUkVI').' tFUkVI</euUURq>';
                        $hmuJkq->EFUkRq .= '<euUURq FmEpp="eUq eUq-TIf Lp_hmuJkq_eUq__TIQRVI" fEUE-qEQI="'.$hmuJkq->qEQI.'">'.tfQkq::kFRq('fImIUI').' nImIUI</euUURq>';
                    }
                }
            }
            ImpI {
                $TIpumU['pUEUup']   = 'vETqkqJ';
                $TIpumU['QIppEJI'] 	= '1jôqJ Fó hmuJkq mRFEm';
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    huemkF pUEUkF iuqFUkRq EFUkVI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '1íFj jRạU hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(!FQp_upmJ_mkFIqpI()) {
            $TIpumU['QIppEJI'] 	= 'rạq ljôqJ Ujể líFj jRạU hmuJkq Vì mý fR eảq suwềq.';
            IFjR LpRq_IqFRfI($TIpumU);
            TIUuTq iEmpI;
        }

        ki(NIsuIpU::hRpU()) {

            $qEQI = NIsuIpU::hRpU('qEQI');

            ki(hmuJkq::jEp($qEQI)){

                //ljởk UạR UjôqJ Ukq hmuJkq
                $hmuJkq = qIv hmuJkq($qEQI);

                //kqFmufI ikmI Fầq UjkếU
                $hmuJkq->kqFmufI();

                //lkểQ UTE đốk UượqJ hmuJkq
                ki(FmEpp_IWkpUp($hmuJkq->FmEpp)) {

                    ki($hmuJkq->EFUkVI == Y)  {
                        $TIpumU['QIppEJI'] 	= 'amuJkq qàw đã đượF líFj jRạU.';
                        IFjR LpRq_IqFRfI($TIpumU);
                        TIUuTq iEmpI;
                    }

                    $FRqqIFU = O1nOITVkFI::pITVkFI()->FRqqIFU();

                    ki(!$FRqqIFU) {
                        $TIpumU['QIppEJI'] 	= '1ếU qốk pITVkFI ljôqJ Ujàqj FôqJ.';
                        IFjR LpRq_IqFRfI($TIpumU);
                        TIUuTq iEmpI;
                    }

                    $FuTTIqU_hmuJkq = qIv $hmuJkq->FmEpp();

                    $ITTRTp = [];

                    ki(!$hmuJkq->kp_pIUuh()) {
                        ki(QIUjRf_IWkpUp($FuTTIqU_hmuJkq, 'EFUkVI')) {
                            $ITTRTp = $FuTTIqU_hmuJkq->EFUkVI();
                        }
                    }
                    ImpI {
                        ki(QIUjRf_IWkpUp($FuTTIqU_hmuJkq, 'TIpUETU')) {
                            $ITTRTp = $FuTTIqU_hmuJkq->TIpUETU();
                        }
                    }

                    ki(!kp_plf_ITTRT($ITTRTp)) {
                        //EFUkVI hmuJkq
                        $Fk->hmuJkqp['EFUkVI'][$qEQI] = UTuI;
                        $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Fpp');
                        $TIpumU['QIppEJI'] 	= 'hmuJkq <e>'.$hmuJkq->mEeIm.'</e> đã đượF líFj jRạU';
                        $TIpumU['pUEUup'] 	= 'puFFIpp';
                        MhUkRq::uhfEUI('hmuJkq_EFUkVI', $Fk->hmuJkqp['EFUkVI']);
                    }
                    ImpI {
                        iRTIEFj ($ITTRTp->ITTRTp Ep $ITTRT) {
                            $TIpumU['QIppEJI'] 	= $ITTRT[x];
                        }
                    }
                }
                /**
                @ đốk UượqJ hmuJkq FjưE đượF ljởk UạR
                 */
                ImpI {
                    $TIpumU['QIppEJI'] 	= 'amuJkq <e>'.$hmuJkq->mEeIm.'</e> FmEpp FjưE đượF ljEk eáR';
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq UTuI;
    }
    huemkF pUEUkF iuqFUkRq fIEFUkVEUI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'AJưqJ líFj jRạU hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $qEQI = NIsuIpU::hRpU('qEQI');

            ki(hmuJkq::jEp($qEQI)){

                //ljởk UạR UjôqJ Ukq hmuJkq
                $hmuJkq = qIv hmuJkq($qEQI);

                //kqFmufI ikmI Fầq UjkếU
                $hmuJkq->kqFmufI();

                //lkểQ UTE đốk UượqJ hmuJkq
                ki(FmEpp_IWkpUp($hmuJkq->FmEpp)) {
                    ki(!$hmuJkq->EFUkVI == Y)  {
                        $TIpumU['QIppEJI'] 	= 'amuJkq qàw FjưE đượF líFj jRạU.';
                        IFjR LpRq_IqFRfI($TIpumU);
                        TIUuTq iEmpI;
                    }
                    $FuTTIqU_hmuJkq = qIv $hmuJkq->FmEpp();
                    ki(QIUjRf_IWkpUp($FuTTIqU_hmuJkq, 'fIEFUkVEUI')) {
                        $FuTTIqU_hmuJkq->fIEFUkVEUI();
                    }
                    //EFUkVI hmuJkq
                    $Fk->hmuJkqp['EFUkVI'][$qEQI] = iEmpI;
                    $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Fpp');
                    $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Lp');
                    $TIpumU['QIppEJI'] 	= 'hmuJkq <e>'.$hmuJkq->mEeIm.'</e> đã qJưqJ líFj jRạU';
                    $TIpumU['pUEUup'] 	= 'puFFIpp';
                    MhUkRq::uhfEUI('hmuJkq_EFUkVI', $Fk->hmuJkqp['EFUkVI']);
                }
                ImpI {
                    $TIpumU['QIppEJI'] 	= 'amuJkq <e>'.$hmuJkq->mEeIm.'</e> FmEpp FjưE đượF ljEk eáR';
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq UTuI;
    }
    huemkF pUEUkF iuqFUkRq uhJTEfI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'oậh qjậU hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $qEQI = NIsuIpU::hRpU('qEQI');

            ki(hmuJkq::jEp($qEQI)) {

                $hmuJkq = O1nOITVkFI::hmuJkq()->JIU($qEQI);

                ki($hmuJkq->pUEUup == 'puFFIpp') {

                    $hmuJkq = $hmuJkq->fEUE;

                    ki(VITpkRq_FRQhETI($hmuJkq->FRQhEUkekmkUw, oQp::VITpkRq()) == Y) {
                        $TIpumU['QIppEJI'] 	= 'amuJkq wêu Fầu hjkêq eảq FQp <e>'.$hmuJkq->FRQhEUkekmkUw.'</e> Vuk mòqJ qâqJ Fấh FQp';
                        $TIpumU['pUEUup'] 	= 'ITTRT';
                        IFjR LpRq_IqFRfI($TIpumU);
                        TIUuTq iEmpI;
                    }

                    $FjIFl = hmuJkq::fRvqmREf( $hmuJkq );

                    ki($FjIFl) {
                        $FjIFl = hmuJkq::IWUTEFU( $hmuJkq );
                    }

                    ki($FjIFl) {
                        $TIpumU['QIppEJI'] 	= 'oậh qjậU hmuJkq Ujàqj FôqJ';
                        $TIpumU['pUEUup'] 	= 'puFFIpp';
                        $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Fpp');
                    }
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq UTuI;
    }
    huemkF pUEUkF iuqFUkRq TIQRVI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'AJưqJ líFj jRạU hmuJkq ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $qEQI = NIsuIpU::hRpU('qEQI');

            ki(hmuJkq::jEp($qEQI)) {

                //ljởk UạR UjôqJ Ukq hmuJkq
                $hmuJkq = qIv hmuJkq($qEQI);

                //kqFmufI ikmI Fầq UjkếU
                $hmuJkq->kqFmufI();

                ki($hmuJkq->EFUkVI == Y) {
                    $TIpumU['QIppEJI'] 	= 'Vuk mòqJ UắU líFj jRạU hmuJkq UTướF ljk Jở ljỏk jệ UjốqJ.';
                    IFjR LpRq_IqFRfI($TIpumU);
                    TIUuTq iEmpI;
                }

                uqpIU($Fk->hmuJkqp['EFUkVI'][$qEQI]);

                $FuTTIqU_hmuJkq = qIv $hmuJkq->FmEpp();

                ki(QIUjRf_IWkpUp($FuTTIqU_hmuJkq, 'uqkqpUEmm')) {
                    $FuTTIqU_hmuJkq->uqkqpUEmm();
                }

                ki(!kppIU($Fk->hmuJkqp['EFUkVI'])) $Fk->hmuJkqp['EFUkVI'] = [];

                ki(MhUkRq::uhfEUI('hmuJkq_EFUkVI',$Fk->hmuJkqp['EFUkVI'])) {
                    $Fk->mREf->jImhIT("ikmI");
                    $hEUj = aEUj::hmuJkq($qEQI);
                    fImIUI_ikmIp($hEUj, UTuI);
                    TQfkT($hEUj);
                    $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Fpp');
                    $Fk->fEUE['UIQhmEUI']->Qkqkiw_FmIET('Lp');
                    $TIpumU['QIppEJI'] 	= 'hmuJkq <e>'.$hmuJkq->mEeIm.'</e> đã đượF Jở ljỏk jệ UjốqJ';
                    $TIpumU['pUEUup'] 	= 'puFFIpp';
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq UTuI;
    }
}

/**
=================================================
2MN3
=================================================
 */
omEpp tLEW_tfQkq_HEemI_2RTQ {
    huemkF iuqFUkRq __FRqpUTuFU() {
        tLEW::EfQkq('tLEW_tfQkq_HEemI_2RTQ::pEVI');
        tLEW::EfQkq('tLEW_tfQkq_HEemI_2RTQ::pEVIoEUIJRTw');
        tLEW::EfQkq('tLEW_tfQkq_HEemI_2RTQ::pEVIKqhuUrRRmIEq');
        tLEW::EfQkq('tLEW_tfQkq_HEemI_2RTQ::pEVIHEemIgfkU');
    }

    huemkF pUEUkF iuqFUkRq pEVI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '6ưu fữ mkệu UjấU eạk';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $hRpU = NIsuIpU::hRpU();

            $QRfumI = NIsuIpU::hRpU('QRfumI');

            $kf     = (kqU)NIsuIpU::hRpU('kf');

            $fEUEMuUpkfI['UEWRqRQkIp'] = [];

            ki(($QRfumI == 'hRpU' || $QRfumI == 'hTRfuFUp') && kppIU($hRpU['UEWRqRQw'])) {
                $fEUEMuUpkfI['UEWRqRQkIp'] = $hRpU['UEWRqRQw'];
                uqpIU($hRpU['UEWRqRQw']);
            }

            //Wử fữ mkệu TImEUkRqpjkhp
            ki($QRfumI == 'hTRfuFUp' && kppIU($hRpU['FEUIJRTw_kf'])) {
                $fEUEMuUpkfI['UEWRqRQkIp']['hTRfuFUp_FEUIJRTkIp']  = $hRpU['FEUIJRTw_kf'];
                uqpIU($hRpU['FEUIJRTw_kf']);
            }

            $fEUEMuUpkfI = Ehhmw_ikmUITp( 'plf_iRTQ_hTRFIpp_fEUE', $fEUEMuUpkfI);

            $Fk->fEUE['QRfumI'] = $QRfumI;

            $Fk->FTIEU2RTQ(['FmEpp' => $QRfumI]);

            $ITTRTp = Ehhmw_ikmUITp('EfQkq_iRTQ_VEmkfEUkRq', qumm, $QRfumI);

            ki(kp_plf_ITTRT($ITTRTp)) {
                iRTIEFj ($ITTRTp->ITTRTp Ep $ITTRT) $TIpumU['QIppEJI'] 	= $ITTRT[x];
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki(!IQhUw($kf)) {
                $TIpumU = $Fk->iRTQgfkU($hRpU, $kf, $fEUEMuUpkfI);
            }
            ImpI {
                $TIpumU = $Fk->iRTQtff($hRpU, $fEUEMuUpkfI);
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }

    huemkF pUEUkF iuqFUkRq pEVIoEUIJRTw($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'HjêQ fữ mkệu UjấU eạk';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $hRpU = NIsuIpU::hRpU();

            $QRfumI = NIsuIpU::hRpU('QRfumI');

            $kf     = (kqU)NIsuIpU::hRpU('kf');

            $fEUEMuUpkfI['UEWRqRQkIp'] = [];

            ki(($QRfumI == 'hRpU' || $QRfumI == 'hTRfuFUp') && kppIU($hRpU['UEWRqRQw'])) {
                $fEUEMuUpkfI['UEWRqRQkIp'] = $hRpU['UEWRqRQw'];
                uqpIU($hRpU['UEWRqRQw']);
            }

            //Wử fữ mkệu TImEUkRqpjkhp
            ki($QRfumI == 'hTRfuFUp' && kppIU($hRpU['FEUIJRTw_kf'])) {
                $fEUEMuUpkfI['UEWRqRQkIp']['hTRfuFUp_FEUIJRTkIp']  = $hRpU['FEUIJRTw_kf'];
                uqpIU($hRpU['FEUIJRTw_kf']);
            }

            $fEUEMuUpkfI = Ehhmw_ikmUITp( 'plf_iRTQ_hTRFIpp_fEUE', $fEUEMuUpkfI);

            $Fk->fEUE['QRfumI'] = $QRfumI;

            $Fk->FTIEU2RTQ(['FmEpp' => $QRfumI]);

            $ITTRTp = Ehhmw_ikmUITp('EfQkq_iRTQ_VEmkfEUkRq', qumm, $QRfumI);

            ki(kp_plf_ITTRT($ITTRTp)) {
                iRTIEFj ($ITTRTp->ITTRTp Ep $ITTRT) $TIpumU['QIppEJI'] 	= $ITTRT[x];
                IFjR LpRq_IqFRfI($TIpumU);
                TIUuTq iEmpI;
            }

            ki(!IQhUw($kf)) {
                $TIpumU = $Fk->iRTQgfkU($hRpU, $kf, $fEUEMuUpkfI);
            }
            ImpI {
                $TIpumU = $Fk->iRTQtff($hRpU, $fEUEMuUpkfI);
            }

            ki($TIpumU['pUEUup'] == 'puFFIpp') {


                $ETJp = GT::pIU()->FEUIJRTwHwhI('UTII')->RTfITrw('RTfIT')->RTfITrw('FTIEUIf', 'fIpF');

                $iuqFUkRq0IU = '';
                $FmEppHEemI = '';
                $ReLIFUp = [];

                ki($QRfumI == 'hRpU_FEUIJRTkIp') {
                    $QRfIm->pIUHEemI('FEUIJRTkIp');
                    $FEUIHwhI = UTkQ(NIsuIpU::hRpU('FEUI_UwhI'));
                    ki(!IQhUw($FEUIHwhI)) $ETJp->vjITI('FEUI_UwhI', $FEUIHwhI);
                    $iuqFUkRq0IU = 'aRpUoEUIJRTw::JIUp';
                    ki(FmEpp_IWkpUp('plf_FEUI_'.$FEUIHwhI.'_mkpU_UEemI')) {
                        $FmEppHEemI = 'plf_FEUI_'.$FEUIHwhI.'_mkpU_UEemI';
                    } ImpI $FmEppHEemI = 'tfQkqaRpUoEUIJRTkIpHEemI';
                }

                ki($QRfumI == 'hTRfuFUp_FEUIJRTkIp') {
                    $iuqFUkRq0IU = 'aTRfuFUoEUIJRTw::JIUp';
                    $FmEppHEemI = 'tfQkqaTRfuFUoEUIJRTwHEemI';
                }

                $iuqFUkRq0IU 	 = Ehhmw_ikmUITp('pueQkU_FEUIJRTw_iuqFUkRq_JIU', $iuqFUkRq0IU, $QRfumI);

                $FmEppHEemI      = Ehhmw_ikmUITp('pueQkU_FEUIJRTw_FmEpp_UEemI', $FmEppHEemI, $QRfumI);

                $ETJp            = Ehhmw_ikmUITp('pueQkU_FEUIJRTw_ETJp', $ETJp, $QRfumI);


                ki(iuqFUkRq_IWkpUp($iuqFUkRq0IU)) {
                    $ReLIFUp  = $iuqFUkRq0IU($ETJp);
                }
                ImpI {
                    ki(pUT_FRqUEkqp($iuqFUkRq0IU, '::')) {
                        $iuqFUkRq0IUHIQh = IWhmRfI('::', $iuqFUkRq0IU);
                        ki(QIUjRf_IWkpUp($iuqFUkRq0IUHIQh[x], $iuqFUkRq0IUHIQh[Y])) {
                            $ReLIFUp  = $iuqFUkRq0IU($ETJp);
                        }
                    }
                    ImpI {
                        $ReLIFUp = $QRfIm->JIUp($ETJp);
                    }
                }

                /* UạR UEemI */
                $ETJp = [
                    'kUIQp' => $ReLIFUp,
                    'UEemI' => $QRfIm->JIUHEemI(),
                    'QRfIm' => $QRfIm,
                    'QRfumI'=> $QRfumI,
                ];

                $UEemI_mkpU = qIv $FmEppHEemI($ETJp);

                Re_pUETU();

                $UEemI_mkpU->fkphmEw();

                $TIpumU['kUIQ'] = Re_JIU_FRqUIqUp();

                Re_Iqf_FmIEq();

                //0IU fEqj QụF
                Re_pUETU();

                $hETIqU_kf = [];

                ki($QRfumI == 'hRpU_FEUIJRTkIp') {
                    $hETIqU_kf = aRpUoEUIJRTw::JIUp(GT::pIU()->FEUIJRTwHwhI('RhUkRqp')->vjITI('FEUI_UwhI', $FEUIHwhI));
                }

                ki($QRfumI == 'hTRfuFUp_FEUIJRTkIp') {
                    $hETIqU_kf = aTRfuFUoEUIJRTw::JIUp(GT::pIU()->FEUIJRTwHwhI('RhUkRqp'));
                }

                $hETIqU_kf = Ehhmw_ikmUITp('pueQkU_FEUIJRTw_hETIqU_kf', $hETIqU_kf, $QRfumI);

                $hETIqU_kf[x] = 'ojọq fEqj QụF FjE';

                iRTIEFj ($hETIqU_kf Ep $lIw => $VEmuI) {
                    ?><RhUkRq VEmuI="<?hjh IFjR $lIw;?>"><?hjh IFjR $VEmuI;?></RhUkRq><?hjh
                }

                $TIpumU['hETIqU_kf'] = Re_JIU_FRqUIqUp();

                Re_Iqf_FmIEq();
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
    /**
     * [uhmREf fữ mkệu fạqJ UTuI iEmpI ở UEemI]
     */
    huemkF pUEUkF iuqFUkRq pEVIKqhuUrRRmIEq($Fk, $QRfIm) {
        $TIpumU['QIppEJI'] 	= 'oậh qjậU fữ mkệu Ujàqj FôqJ';
        $TIpumU['pUEUup'] 	= 'ITTRT';
        ki(NIsuIpU::hRpU('kf')) {
            $kf 	= (kqU)NIsuIpU::hRpU('kf');
            $UEemI 	= OUT::FmIET(NIsuIpU::hRpU('UEemI'));
            $TRv 	= OUT::FmIET(NIsuIpU::hRpU('TRv'));
            ki($UEemI == 'hRpU_FEUIJRTkIp') $UEemI = 'FEUIJRTkIp';
            $QRfIm->pIUUEemI($UEemI);
            $ReLIFU = $QRfIm->JIU(GT::pIU('kf', $kf));
            ki(jEVI_hRpUp($ReLIFU) && kppIU($ReLIFU->$TRv)) {
                ki($ReLIFU->$TRv == x) $uh[$TRv] = Y; ImpI $uh[$TRv] = x;
                ki($QRfIm->uhfEUI($uh, GT::pIU($kf))) {
                    fR_EFUkRq( 'uh_eRRmIEq_puFFIpp', $UEemI, $kf  );
                    $TIpumU['QIppEJI'] 	= 'oậh qjậU fữ mkệu Ujàqj FôqJ';
                    $TIpumU['pUEUup'] 	= 'puFFIpp';
                }
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
    /**
     * [ELEW_uh_eRRmIEq uhmREf fữ mkệu fạqJ ởUEemI]
     */
    huemkF pUEUkF iuqFUkRq pEVIHEemIgfkU($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'oậh qjậU fữ mkệu ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $kf 	= (kqU)NIsuIpU::hRpU('hl');

            $UEemI 	= NIsuIpU::hRpU('UEemI');

            $TRv 	= NIsuIpU::hRpU('qEQI');

            $VEmuI 	= NIsuIpU::hRpU('VEmuI');

            $UwhI 	= NIsuIpU::hRpU('UwhI');

            ki(!IQhUw($kf)) {

                $QRfIm->pIUUEemI($UEemI);

                $ReLIFU = $QRfIm->JIU(GT::pIU('kf', $kf));

                ki( jEVI_hRpUp($ReLIFU) && kppIU( $ReLIFU->$TRv ) ) {

                    $uh[$TRv] = $VEmuI;

                    ki( $UwhI == 'quQeIT' ) $uh[$TRv] = (kqU)$VEmuI;

                    ki( $UwhI == 'UIWU' ) 	$uh[$TRv] = OUT::FmIET($VEmuI);

                    ki( $TRv == 'hTkFI' || $TRv == 'hTkFI_pEmI')  {
                        $uh[$TRv] = pUT_TIhmEFI(',', '', $uh[$TRv]);
                        $uh[$TRv] = pUT_TIhmEFI('.', '', $uh[$TRv]);
                    }

                    ki($QRfIm->uhfEUI($uh, GT::pIU('kf', $kf))) {

                        fR_EFUkRq( 'uh_UEemI_puFFIpp', $UEemI, $kf  );

                        $TIpumU['QIppEJI'] 	= 'oậh qjậU fữ mkệu Ujàqj FôqJ';

                        $TIpumU['pUEUup'] 	= 'puFFIpp';
                    }
                }
            }
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
}

omEpp oQp_tLEW_tFUkRq {

    huemkF iuqFUkRq __FRqpUTuFU() {
        qIv tLEW_tfQkq_PpIT_tFUkRq();
        qIv tLEW_tfQkq_HjIQI_tFUkRq();
        qIv tLEW_tfQkq_nEpjeRETf_tFUkRq();
        qIv tLEW_tfQkq_3Iqu_tFUkRq();
        qIv tLEW_tfQkq_bkfJIU_OITVkFI_tFUkRq();
        qIv tLEW_tfQkq_bkfJIU_tFUkRq();
        qIv tLEW_tfQkq_0EmmITw_tFUkRq();
        qIv tLEW_tfQkq_amuJkq_tFUkRq();
        qIv tLEW_tfQkq_HEemI_2RTQ();
        qIv tLEW_tfQkq_PhfEUI_oRTI();
        tLEW::EfQkq('oQp_tLEW_tFUkRq::fImIUI');
        tLEW::EfQkq('oQp_tLEW_tFUkRq::TIpURTI');
    }

    huemkF pUEUkF iuqFUkRq fImIUI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= 'CóE fữ mkệu ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU()) {

            $UTEpj 	= NIsuIpU::hRpU('UTEpj');

            $fEUE 	= NIsuIpU::hRpU('fEUE');

            $QRfumI = NIsuIpU::hRpU('QRfumI');

            $TIp    = [];

            ki(IQhUw($fEUE)) {
                $TIpumU['QIppEJI'] 	= '1jôqJ Fó fữ mkệu qàR để WóE'; IFjR LpRq_IqFRfI($TIpumU); TIUuTq iEmpI;
            }
            ki(IQhUw($QRfumI)) {
                $TIpumU['QIppEJI'] 	= '1jôqJ WáF địqj đượF lkểu fữ mkệu để WóE'; IFjR LpRq_IqFRfI($TIpumU); TIUuTq iEmpI;
            }

            ki(!IQhUw($UTEpj)) {

                ki(kp_quQITkF($fEUE)) {
                    ki($QRfumI == 'hEJI') {
                        $TIp = aEJIp::fImIUI($fEUE, UTuI);
                    }
                    ImpI ki($QRfumI == 'hRpU') {
                        $TIp = aRpUp::fImIUI($fEUE, UTuI);
                    }
                    ImpI ki($QRfumI == 'hRpU_FEUIJRTkIp') {
                        $TIp = aRpUoEUIJRTw::fImIUI($fEUE, UTuI);
                    }
                    ImpI ki(FmEpp_IWkpUp($QRfumI) && QIUjRf_IWkpUp($QRfumI, 'fImIUI')) {
                        $TIp = $QRfumI::fImIUI($fEUE, UTuI);
                    }
                    ImpI {
                        $QRfIm->pIUUEemI($QRfumI);
                        ki($QRfIm->uhfEUI(['UTEpj' => Y], GT::pIU('kf', $fEUE))) {
                            $TIp = [$fEUE];
                        }
                    }
                }
                ImpI ki(jEVI_hRpUp($fEUE)) {
                    ki($QRfumI == 'hEJI') {
                        $TIp = aEJIp::fImIUI6kpU($fEUE, UTuI);
                    }
                    ImpI ki($QRfumI == 'hRpU') {
                        $TIp = aRpUp::fImIUI6kpU($fEUE, UTuI);
                    }
                    ImpI ki($QRfumI == 'hRpU_FEUIJRTkIp') {
                        $TIp = aRpUoEUIJRTw::fImIUI6kpU($fEUE, UTuI);
                    }
                    ImpI ki(FmEpp_IWkpUp($QRfumI) && QIUjRf_IWkpUp($QRfumI, 'fImIUI')) {
                        $TIp = $QRfumI::fImIUI6kpU($fEUE, UTuI);
                    }
                    ImpI {
                        $QRfIm->pIUUEemI($QRfumI);
                        ki($QRfIm->uhfEUI(['UTEpj' => Y], GT::pIU()->vjITIKq('kf', $fEUE))) {
                            $TIp = $fEUE;
                        }
                    }
                }

                $TIp = Ehhmw_ikmUITp('UTEpj_ReLIFU_'.$QRfumI, $TIp, $QRfumI, $fEUE);

                fR_EFUkRq('ELEW_UTEpj_ReLIFU_puFFIpp', $QRfumI, $fEUE, $TIp);

                ki(jEVI_hRpUp($TIp)) {
                    $TIpumU['fEUE'] 	= $TIp;
                    $TIpumU['QIppEJI'] 	= 'CóE fữ mkệu Ujàqj FôqJ!';
                    $TIpumU['pUEUup'] 	= 'puFFIpp';
                }
            }
            ImpI {

                fR_EFUkRq('ELEW_fImIUI_EiUIT_puFFIpp', $QRfumI, $fEUE);

                ki(kp_quQITkF($fEUE)) {
                    ki($QRfumI == 'hEJI') $TIp = aEJIp::fImIUI($fEUE);
                    ImpI ki($QRfumI == 'hRpU') $TIp = aRpUp::fImIUI($fEUE);
                    ImpI ki($QRfumI == 'hRpU_FEUIJRTkIp') {
                        $TIp = aRpUoEUIJRTw::fImIUI($fEUE);
                    }
                    ImpI ki(FmEpp_IWkpUp($QRfumI) && QIUjRf_IWkpUp($QRfumI, 'fImIUI')) {
                        $TIp = $QRfumI::fImIUI($fEUE);
                    }
                    $TIp = Ehhmw_ikmUITp('fImIUI_ReLIFU_'.$QRfumI, $TIp, $QRfumI, $fEUE);
                    fR_EFUkRq('ELEW_fImIUI_ReLIFU_eIiRTI_puFFIpp', $QRfumI, $fEUE, $TIp);
                }
                ImpI ki(jEVI_hRpUp($fEUE)) {
                    ki($QRfumI == 'hEJI') $TIp = aEJIp::fImIUI6kpU($fEUE);
                    ImpI ki($QRfumI == 'hRpU') $TIp = aRpUp::fImIUI6kpU($fEUE);
                    ImpI ki($QRfumI == 'hRpU_FEUIJRTkIp') $TIp = aRpUoEUIJRTw::fImIUI6kpU($fEUE);
                    ImpI ki(FmEpp_IWkpUp($QRfumI) && QIUjRf_IWkpUp($QRfumI, 'fImIUI6kpU')) {
                        $TIp = $QRfumI::fImIUI6kpU($fEUE);
                    }
                    $TIp = Ehhmw_ikmUITp('fImIUI_ReLIFU_'.$QRfumI, $TIp, $QRfumI, $fEUE);
                    fR_EFUkRq('ELEW_fImIUI_mkpU_eIiRTI_puFFIpp', $QRfumI, $fEUE, $TIp);
                }
                ki($TIp) {
                    $TIpumU['fEUE'] 	= $TIp;
                    $TIpumU['QIppEJI'] 	= 'CóE fữ mkệu Ujàqj FôqJ!';
                    $TIpumU['pUEUup'] 	= 'puFFIpp';
                    fR_EFUkRq('ELEW_fImIUI_eIiRTI_puFFIpp', $QRfumI, $fEUE, $TIp);
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);

        TIUuTq UTuI;
    }

    huemkF pUEUkF iuqFUkRq TIpURTI($Fk, $QRfIm) {

        $TIpumU['QIppEJI'] 	= '1jôk hjụF fữ mkệu ljôqJ Ujàqj FôqJ';

        $TIpumU['pUEUup'] 	= 'ITTRT';

        ki(NIsuIpU::hRpU('fEUE')) {

            $fEUE 	= NIsuIpU::hRpU('fEUE');

            $QRfumI = NIsuIpU::hRpU('QRfumI');

            ki(!IQhUw($fEUE)) {

                ki(kp_quQITkF($fEUE)) $fEUE = [$fEUE];

                ki(jEVI_hRpUp($fEUE)) {

                    $ETJp = GT::pIU()->vjITIKq('kf', $fEUE);

                    ki($QRfumI == 'hEJI') {
                        $TIp = aEJIp::TIpURTI($ETJp);
                    }
                    ImpI ki($QRfumI == 'hRpU') {
                        $TIp = aRpUp::TIpURTI($ETJp);
                    }
                    ImpI ki($QRfumI == 'hRpU_FEUIJRTkIp') {
                        $TIp = aRpUoEUIJRTw::uhfEUI(['UTEpj' => x], $ETJp);
                    }
                    ImpI ki(FmEpp_IWkpUp($QRfumI) && QIUjRf_IWkpUp($QRfumI, 'TIpURTI')) {
                        $TIp = $QRfumI::TIpURTI($ETJp);
                    }
                    ImpI {
                        $TIp = $QRfIm->pIUUEemI($QRfumI)->uhfEUI(['UTEpj' => x], $ETJp);
                    }

                    ki(!IQhUw($TIp)) {

                        fR_EFUkRq('ELEW_TIpURTI_ReLIFU_puFFIpp', $QRfumI, $fEUE);

                        fR_EFUkRq('ELEW_TIpURTI_'.$QRfumI.'_puFFIpp', $QRfumI, $fEUE);

                        $TIpumU['QIppEJI'] 	= '1jôk hjụF fữ mkệu Ujàqj FôqJ';

                        $TIpumU['pUEUup'] 	= 'puFFIpp';

                        $TIpumU['fEUE'] 	= $fEUE;
                    }
                }
            }
        }

        IFjR LpRq_IqFRfI($TIpumU);
    }
}

qIv oQp_tLEW_tFUkRq();

iuqFUkRq ELEW_kqhuU_hRhRVIT_pIETFj($Fk, $QRfIm) {

    $TIpumU['QIppEJI'] 	= 'oậh qjậU fữ mkệu ljôqJ Ujàqj FôqJ';

    $TIpumU['UwhI'] 	= 'ITTRT';

    ki(NIsuIpU::hRpU()) {

        $lIwvRTf 		= OUT::FmIET(NIsuIpU::hRpU('lIwvRTf'));

        $fEUE_pImIFU 	= NIsuIpU::hRpU('pImIFU');

        $QRfumI 		= OUT::FmIET(NIsuIpU::hRpU('QRfumI'));

        $ReLIFU 		= [];

        ki($QRfumI == 'hRpU_FEUIJRTkIp') {

            $lIwHwhI 		= OUT::FmIET(NIsuIpU::hRpU('lIw_UwhI'));

            $ReLIFU = aRpUoEUIJRTw::JIUp(GT::pIU('FEUI_UwhI', $lIwHwhI)->vjITI('qEQI', 'mklI', '%'.$lIwvRTf.'%'));
        }
        ImpI ki($QRfumI == 'hRpU') {

            $lIwHwhI 		= OUT::FmIET(NIsuIpU::hRpU('lIw_UwhI'));

            $ReLIFU = aRpUp::JIUp(GT::pIU('hRpU_UwhI', $lIwHwhI)->vjITI('UkUmI', 'mklI', '%'.$lIwvRTf.'%'));
        }
        ImpI ki($QRfumI == 'hEJI') {

            $ReLIFU = aEJIp::JIUp(GT::pIU('qEQI', 'mklI', '%'.$lIwvRTf.'%'));
        }
        ImpI {

            $ReLIFU = Ehhmw_ikmUITp('kqhuU_hRhRVIT_'.$QRfumI.'_pIETFj', $ReLIFU, $lIwvRTf);
        }

        $TIpumU['UwhI'] 	= 'puFFIpp';

        $TIpumU['fEUE'] = '<mk FmEpp=""><E>1jôqJ Fó fữ mkệu.</E></mk>';

        ki( jEVI_hRpUp($ReLIFU) ) {

            $TIpumU['fEUE'] = '';

            iRTIEFj ($ReLIFU Ep $lIw => $VEmuI) {

                $EFUkVI = (!IQhUw($fEUE_pImIFU[$VEmuI->kf]))?'RhUkRq--kp-EFUkVI':'';

                $qEQI   = '';

                ki(kppIU($VEmuI->qEQI)) $qEQI = $VEmuI->qEQI;

                ki(kppIU($VEmuI->UkUmI)) $qEQI = $VEmuI->UkUmI;

                $pUT = '<mk FmEpp="RhUkRq RhUkRq-'.$VEmuI->kf.' '.$EFUkVI.'" fEUE-lIw="'.$VEmuI->kf.'"><E jTIi=""> <phEq FmEpp="kFRq"><k FmEpp="iEm iE-FjIFl"></k></phEq> <phEq FmEpp="mEeIm-RhUkRq">'.$qEQI.'</phEq> </E> </mk>';

                $TIpumU['fEUE'] .= Ehhmw_ikmUITp('kqhuU_hRhRVIT_'.$QRfumI.'_pIETFj_UIQhmEUI', $pUT, $VEmuI, $EFUkVI );
            }
        }
    }
    IFjR LpRq_IqFRfI($TIpumU);
}
tLEW::EfQkq('ELEW_kqhuU_hRhRVIT_pIETFj');

iuqFUkRq ELEW_EfQkq_pmuJ_FTIEUI($Fk, $QRfIm) {

    $TIpumU['QIppEJI'] 	= 'HjêQ fữ mkệu UjấU eạk';

    $TIpumU['pUEUup'] 	= 'ITTRT';

    ki(NIsuIpU::hRpU()) {

        $pmuJ   = OUT::pmuJ(OUT::FmIET(NIsuIpU::hRpU('pmuJ')));

        $kf     = (kqU)OUT::FmIET(NIsuIpU::hRpU('pmuJ_kf'));

        $UIQh   = $pmuJ;

        $QRfIm->pIUUEemI('TRuUIp');

        $FRuqU  = $QRfIm->FRuqU(GT::pIU('pmuJ', $pmuJ)->vjITI('ReLIFU_kf', '<>', $kf));

        ki($FRuqU == Y) {
            $k = Y;
            vjkmI ($FRuqU == Y) {
                $pmuJ 	= $UIQh.'-'.$k;
                $FRuqU = $QRfIm->FRuqU(GT::pIU('pmuJ', $pmuJ)->vjITI('ReLIFU_kf', '<>', $kf));
                $k++;
            }
        }

        $TIpumU['pUEUup'] 	= 'puFFIpp';

        $TIpumU['pmuJ'] 	= $pmuJ;
    }

    IFjR LpRq_IqFRfI($TIpumU);
}
tLEW::EfQkq('ELEW_EfQkq_pmuJ_FTIEUI');

omEpp aRhRVIT_OIETFj {
    pUEUkF huemkF iuqFUkRq hRpU($Fk, $QRfIm) {
        $TIpumU['QIppEJI'] 	= '1jôqJ Fó lếU suả qàR.';
        $TIpumU['pUEUup'] 	= 'ITTRT';
        $TIpumU['kUIQp']     = [];
        ki(NIsuIpU::hRpU()) {
            $lIwvRTf    = OUT::EpFkk(UTkQ(NIsuIpU::hRpU('lIwvRTf')));
            $UEWRqRQw   = OUT::EpFkk(UTkQ(NIsuIpU::hRpU('UEWRqRQw')));
            $hEJI       = (kqU)NIsuIpU::hRpU('hEJI') - Y;
            $mkQkU      = (kqU)NIsuIpU::hRpU('mkQkU');
            $ReLIFUp    = aRpUp::JIUp(GT::pIU('UTEpj', x)->vjITI('hRpU_UwhI', $UEWRqRQw)->vjITI('UkUmI', 'mklI', '%'.$lIwvRTf.'%')
                ->pImIFU('kf', 'UkUmI', 'kQEJI')->mkQkU($mkQkU)->RiipIU($hEJI*$mkQkU));
            ki(jEVI_hRpUp($ReLIFUp)) {
                iRTIEFj ($ReLIFUp Ep $VEmuI) {
                    $kUIQ = [
                        'kf'    => $VEmuI->kf,
                        'kQEJI' => HIQhmEUI::kQJ6kql($VEmuI->kQEJI),
                        'qEQI'  => $VEmuI->UkUmI,
                    ];
                    $kUIQ['fEUE'] = jUQmIqUkUkIp(LpRq_IqFRfI($kUIQ));
                    $TIpumU['kUIQp'][]  = $kUIQ;
                }
                $TIpumU['pUEUup'] 	= 'puFFIpp';
            }
            $TIpumU['URUEm'] = FRuqU($TIpumU['kUIQp']);
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF huemkF iuqFUkRq mREfaRpU($mkpUKn, $UEWRqRQw) {
        $kUIQp = [];
        ki(jEVI_hRpUp($mkpUKn)) {
            $ReLIFUp    = aRpUp::JIUp(GT::pIU('UTEpj', x)->vjITI('hRpU_UwhI', $UEWRqRQw)->vjITIKq('kf', $mkpUKn)->pImIFU('kf', 'UkUmI', 'kQEJI'));
            iRTIEFj ($ReLIFUp Ep $VEmuI) {
                $kUIQ = ['kf' => $VEmuI->kf, 'kQEJI' => HIQhmEUI::kQJ6kql($VEmuI->kQEJI), 'qEQI' => $VEmuI->UkUmI];
                $kUIQp[]  = $kUIQ;
            }
        }
        TIUuTq $kUIQp;
    }

    pUEUkF huemkF iuqFUkRq FEUIJRTw($Fk, $QRfIm) {
        $TIpumU['QIppEJI'] 	= '1jôqJ Fó lếU suả qàR.';
        $TIpumU['pUEUup'] 	= 'ITTRT';
        $TIpumU['kUIQp']     = [];
        ki(NIsuIpU::hRpU()) {
            $lIwvRTf    = OUT::EpFkk(UTkQ(NIsuIpU::hRpU('lIwvRTf')));
            $UEWRqRQw   = OUT::EpFkk(UTkQ(NIsuIpU::hRpU('UEWRqRQw')));
            $hEJI       = (kqU)NIsuIpU::hRpU('hEJI') - Y;
            $mkQkU      = (kqU)NIsuIpU::hRpU('mkQkU');
            $ReLIFUp    = aRpUoEUIJRTw::JIUp(GT::pIU('UTEpj', x)->vjITI('FEUI_UwhI', $UEWRqRQw)->vjITI('qEQI', 'mklI', '%'.$lIwvRTf.'%')
                ->pImIFU('kf', 'qEQI', 'kQEJI')->mkQkU($mkQkU)->RiipIU($hEJI*$mkQkU));
            ki(jEVI_hRpUp($ReLIFUp)) {
                iRTIEFj ($ReLIFUp Ep $VEmuI) {
                    $kUIQ = [
                        'kf'    => $VEmuI->kf,
                        'qEQI'  => $VEmuI->qEQI,
                    ];
                    $kUIQ['fEUE'] = jUQmIqUkUkIp(LpRq_IqFRfI($kUIQ));
                    $TIpumU['kUIQp'][]  = $kUIQ;
                }
                $TIpumU['pUEUup'] 	= 'puFFIpp';
            }
            $TIpumU['URUEm'] = FRuqU($TIpumU['kUIQp']);
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF huemkF iuqFUkRq mREfoEUIJRTw($mkpUKn, $UEWRqRQw) {
        $kUIQp = [];
        ki(jEVI_hRpUp($mkpUKn)) {
            $ReLIFUp    = aRpUoEUIJRTw::JIUp(GT::pIU('UTEpj', x)->vjITI('FEUI_UwhI', $UEWRqRQw)->vjITIKq('kf', $mkpUKn)->pImIFU('kf', 'UkUmI', 'kQEJI'));
            iRTIEFj ($ReLIFUp Ep $VEmuI) {
                $kUIQ = ['kf' => $VEmuI->kf, 'qEQI' => $VEmuI->qEQI];
                $kUIQp[]  = $kUIQ;
            }
        }
        TIUuTq $kUIQp;
    }

    pUEUkF huemkF iuqFUkRq hEJI($Fk, $QRfIm) {
        $TIpumU['QIppEJI'] 	= '1jôqJ Fó lếU suả qàR.';
        $TIpumU['pUEUup'] 	= 'ITTRT';
        $TIpumU['kUIQp']     = [];
        ki(NIsuIpU::hRpU()) {
            $lIwvRTf    = OUT::EpFkk(UTkQ(NIsuIpU::hRpU('lIwvRTf')));
            $hEJI       = (kqU)NIsuIpU::hRpU('hEJI') - Y;
            $mkQkU      = (kqU)NIsuIpU::hRpU('mkQkU');
            $ReLIFUp    = aEJIp::JIUp(GT::pIU('UkUmI', 'mklI', '%'.$lIwvRTf.'%')->pImIFU('kf', 'UkUmI', 'kQEJI')->mkQkU($mkQkU)->RiipIU($hEJI*$mkQkU));
            ki(jEVI_hRpUp($ReLIFUp)) {
                iRTIEFj ($ReLIFUp Ep $VEmuI) {
                    $kUIQ = [
                        'kf'    => $VEmuI->kf,
                        'qEQI'  => $VEmuI->UkUmI,
                    ];
                    $kUIQ['fEUE'] = jUQmIqUkUkIp(LpRq_IqFRfI($kUIQ));
                    $TIpumU['kUIQp'][]  = $kUIQ;
                }
                $TIpumU['pUEUup'] 	= 'puFFIpp';
            }
            $TIpumU['URUEm'] = FRuqU($TIpumU['kUIQp']);
        }
        IFjR LpRq_IqFRfI($TIpumU);
    }
    pUEUkF huemkF iuqFUkRq mREfaEJI($mkpUKn, $UEWRqRQw) {
        $kUIQp = [];
        ki(jEVI_hRpUp($mkpUKn)) {
            $ReLIFUp    = aEJIp::JIUp(GT::pIU('UTEpj', x)->vjITIKq('kf', $mkpUKn)->pImIFU('kf', 'UkUmI', 'kQEJI'));
            iRTIEFj ($ReLIFUp Ep $VEmuI) {
                $kUIQ = ['kf' => $VEmuI->kf, 'qEQI' => $VEmuI->UkUmI];
                $kUIQp[]  = $kUIQ;
            }
        }
        TIUuTq $kUIQp;
    }
}
tLEW::EfQkq('aRhRVIT_OIETFj::hRpU');
tLEW::EfQkq('aRhRVIT_OIETFj::FEUIJRTw');
tLEW::EfQkq('aRhRVIT_OIETFj::hEJI');
/**
=================================================
OgNBKog
=================================================
 */
iuqFUkRq ELEW_pITVkFI_mkFIqpI_pEVI($Fk, $QRfIm) {

    $TIpumU['pUEUup'] = 'ITTRT';

    $TIpumU['QIppEJI'] = 'oậh qjậU ljôqJ Ujàqj FôqJ!';

    ki(NIsuIpU::hRpU()) {

        $Ehk_upIT 		= OUT::FmIET(NIsuIpU::hRpU('Ehk_upIT'));

        $Ehk_pIFTIU_lIw = OUT::FmIET(NIsuIpU::hRpU('Ehk_pIFTIU_lIw'));

        MhUkRq::uhfEUI('Ehk_upIT', 		$Ehk_upIT);

        MhUkRq::uhfEUI('Ehk_pIFTIU_lIw', $Ehk_pIFTIU_lIw);

        $TIpumU['pUEUup'] 	= 'puFFIpp';

        $TIpumU['QIppEJI'] 	= 'oậh qjậU fữ mkệu Ujàqj FôqJ!';
    }

    IFjR LpRq_IqFRfI($TIpumU);
}
tLEW::EfQkq('ELEW_pITVkFI_mkFIqpI_pEVI');

/**
=================================================
OcOHg3
=================================================
 */
iuqFUkRq ELEW_pwpUIQ_pEVI( $Fk, $QRfIm ) {

    $TIpumU['pUEUup']  = 'ITTRT';

    $TIpumU['QIppEJI'] = __('6ưu fữ mkệu ljôqJ Ujàqj FôqJ');

    ki( NIsuIpU::hRpU() ) {

        $UEe1Iw = OUT::FmIET(NIsuIpU::hRpU('pwpUIQ_UEe_lIw'));

        $UEe1Iw = pUT_TIhmEFI('-', '_', $UEe1Iw);

        $FjIFl = Ehhmw_ikmUITp('EfQkq_pwpUIQ_'.$UEe1Iw.'_FjIFl', qumm);

        ki(!kp_plf_ITTRT($FjIFl)) {

            $TIpumU['pUEUup']  = 'puFFIpp';

            $TIpumU['QIppEJI'] = __('6ưu fữ mkệu Ujàqj FôqJ.');

            $TIpumU =  Ehhmw_ikmUITp('pwpUIQ_'.$UEe1Iw.'_pEVI', $TIpumU, NIsuIpU::hRpU());

            $TIpumU =  Ehhmw_ikmUITp('EfQkq_pwpUIQ_'.$UEe1Iw.'_pEVI', $TIpumU, NIsuIpU::hRpU());
        }
        ImpI {

            iRTIEFj ($FjIFl->ITTRTp Ep $ITTRT) $TIpumU['QIppEJI'] 	= $ITTRT[x];
        }
    }

    IFjR LpRq_IqFRfI($TIpumU);
}
tLEW::EfQkq('ELEW_pwpUIQ_pEVI');

iuqFUkRq ELEW_IQEkm_pQUh_UIpU( $Fk, $QRfIm ) {

    $TIpumU['pUEUup']  = 'ITTRT';

    $TIpumU['QIppEJI'] = __('6ưu fữ mkệu ljôqJ Ujàqj FôqJ');

    ki( NIsuIpU::hRpU() ) {

        $fEUE = NIsuIpU::hRpU();

        $FRqikJ = ETTEw(
            //Jửk IQEkm Uừ
            'iTRQ' => (!IQhUw($fEUE['pQUh-UIpU-iTRQ']))? OUT::FmIET($fEUE['pQUh-UIpU-iTRQ']) : MhUkRq::JIU('FRqUEFU_QEkm'),
            //Uêq qJườk Jửk
            'qEQI'   => (!IQhUw($fEUE['pQUh-UIpU-qEQI']))? OUT::FmIET($fEUE['pQUh-UIpU-qEQI']) : 'Okêu lkqj fREqj - OK1KnM',
            //Jửk đếq QEkm
            'EffTIpp'   => (!IQhUw($fEUE['pQUh-UIpU-UR']))? OUT::FmIET($fEUE['pQUh-UIpU-UR']) : MhUkRq::JIU('FRqUEFU_QEkm'),
            //Ukêu đề QEkm
            'pueLIFU'    => (!IQhUw($fEUE['pQUh-UIpU-pueLIFU']))? OUT::FmIET($fEUE['pQUh-UIpU-pueLIFU']) : '1kểQ UTE Uíqj qăqJ Jửk IQEkm',
            //qộk fuqJ QEkm
            'FRqUIqU'    => (!IQhUw($fEUE['pQUh-UIpU-FRqUIqU']))? OUT::FmIET($fEUE['pQUh-UIpU-FRqUIqU']) : 'Đâw mà qộk fuqJ lkểQ UTE.',
        );

        $gQEkmSEqfmIT = qIv gQEkmSEqfmIT();

        $TIpumU['pUEUup']  = UTuI;

        $fEUE = $gQEkmSEqfmIT
            ->pIUPpIT(MhUkRq::JIU('pQUh-upIT'))
            ->pIUaEpp(MhUkRq::JIU('pQUh-hEpp'))
            ->pIUSRpU(MhUkRq::JIU('pQUh-pITVIT'))
            ->pIUaRTU(MhUkRq::JIU('pQUh-hRTU'))
            ->pIUBETkEemIBEmuIp($FRqikJ)
            ->pIUgQEkmHIQhmEUI($FRqikJ['FRqUIqU'])
            ->pIqfkqJ();

        ki(kp_plf_ITTRT($fEUE)) {
            iRTIEFj ($fEUE->ITTRTp Ep $ITTRT_lIw => $ITTRT_VEmuI) {
                $TIpumU['fEUE'] = $ITTRT_VEmuI[x];
            }
        }

        $TIpumU['pUEUup']  = 'puFFIpp';

        $TIpumU['QIppEJI'] = __('6ưu fữ mkệu Ujàqj FôqJ.');
    }

    IFjR LpRq_IqFRfI($TIpumU);
}
tLEW::EfQkq('ELEW_IQEkm_pQUh_UIpU');

iuqFUkRq ELEW_EfQkq_FEFjI_FmIET( $Fk, $QRfIm ) {

    $TIpumU['pUEUup'] = 'ITTRT';

    $TIpumU['QIppEJI'] = '6ưu fữ mkệu ljôqJ Ujàqj FôqJ!';

    ki($Fk->kqhuU->hRpU()) {

        $fEUE 			= OUT::FmIET($Fk->kqhuU->hRpU('fEUE'));

        pvkUFj ( $fEUE ) {

            FEpI 'FQp':
                oEFjISEqfmIT::imupj();
                eTIEl;

            FEpI 'RhUkRq':
                oEFjISEqfmIT::fImIUI('pwpUIQ');
                eTIEl;

            FEpI 'vkfJIU':
                oEFjISEqfmIT::fImIUI('vkfJIU_', UTuI);
                oEFjISEqfmIT::fImIUI('pkfIeET_', UTuI);
                eTIEl;

            FEpI 'JEmmITw':
                oEFjISEqfmIT::fImIUI('JEmmITw_', UTuI);
                eTIEl;

            FEpI 'FEUIJRTw':
                oEFjISEqfmIT::fImIUI('hRpU_FEUIJRTw_', UTuI);
                eTIEl;

            FEpI 'upIT':
                oEFjISEqfmIT::fImIUI('upIT_', UTuI);
                eTIEl;

            FEpI 'QIUEfEUE':
                oEFjISEqfmIT::fImIUI('QIUEeRW_', UTuI);
                eTIEl;

            fIiEumU:
                $FEFjI = tfQkqoEFjI3EqEJIT::JIUpMeLIFU();

                ki(!IQhUw($FEFjI[$fEUE]['FEmmeEFl'])) {
                    FEmm_upIT_iuqF( $FEFjI[$fEUE]['FEmmeEFl'], $fEUE );
                }

                eTIEl;
        }

        $TIpumU['pUEUup'] = 'puFFIpp';

        $TIpumU['QIppEJI'] = 'oEFjI đã WóE Ujàqj FôqJ!';
    }

    IFjR LpRq_IqFRfI($TIpumU);
}
tLEW::EfQkq('ELEW_EfQkq_FEFjI_FmIET');